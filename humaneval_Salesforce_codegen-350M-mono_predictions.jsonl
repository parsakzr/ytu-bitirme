{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    This function takes a string containing multiple groups of nested parentheses and returns a list of strings\n    separated by the closing parentheses.\n    \"\"\"\n    return [''.join(group) for group in list(zip(*[iter(paren_string)]*2))]\n"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1)."}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    \"\"\"This function takes a list of deposit and withdrawal operations and checks if the balance of account fallls below zero. It should return True if the balance of account fallls below zero, otherwise it should return False.\"\"\"\n    for operation in operations:\n        if operation == 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate Mean Absolute Deviation\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviation = 0\n    for num in numbers:\n        deviation += (num - mean) ** 2\n    return (deviation / len(numbers)) ** 0.5\n"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [x + delimeter for x in numbers]\n"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        if group == ')':\n            result.append(len(result))\n        elif group == '(':\n            result.append(1)\n        else:\n            result.append(0)\n    return result\n"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]\n"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    This function takes a list of integers and returns a tuple consisting of a sum and a product of all the integers in a list.\n    \"\"\"\n    # Empty sum should be equal to 0 and empty product should be equal to 1.\n    if len(numbers) == 0:\n        return (0, 1)\n    # Initialize the sum and product\n    sum = 0\n    product = 1\n    # Iterate over the list\n    for num in numbers:\n        # Add the current number to the sum\n        sum += num\n        # Multiply the product by the current number\n        product *= num\n    # Return the sum and product\n    return (sum, product)\n"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:]))\n    return max_list\n"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join(map(str, [x ^ y for x, y in zip(a, b)]))\n"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if len(strings) == 0:\n        return None\n    longest = max(strings, key=len)\n    return longest\n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a == b:\n        return a\n    else:\n        return greatest_common_divisor(a % b, b)\n"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n):\n    return '0' +''.join(str(i) for i in range(1, n + 1))\n"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    count = 0\n    for char in string:\n        if char not in string.lower():\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Parse a string representing musical notes in a special ASCII format\n    \"\"\"\n    # TODO\n    return [int(beat) for beat in music_string.split('|')]\n"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    return sorted(numbers)\n"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    smaller = numbers[0]\n    larger = numbers[0]\n    for number in numbers:\n        if number < smaller:\n            smaller = number\n        elif number > larger:\n            larger = number\n    return (smaller, larger)\n"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    return [x / max(1, min(1, x)) for x in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if type(value) == int]\n"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n):\n    \"\"\"\n    Find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    for i in range(2, n+1):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\"\n    This function takes an integer as input and returns a list of prime factors.\n    \"\"\"\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [x for x in numbers if numbers.count(x) > 1]\n"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()\n"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [string for string in strings if prefix in string]\n"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float):\n    return xs[0] + xs[1] * x + xs[1] * x**2 +... xs[n] * x**n\n"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    return [x for x in l if x % 3!= 0 and x % 3 == 0]\n"}
{"task_id": "HumanEval/34", "completion": "def unique(l):\n    return list(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "def max_element(l):\n    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element\n"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n):\n    count = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l):\n    even_indices = [i for i in range(len(l)) if l[i] % 2 == 0]\n    return sorted(l, key=lambda x: x[even_indices])\n"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s):\n    encoded_string = \"\"\n    for i in range(len(s)):\n        encoded_string += s[i]\n        if i == len(s) - 1:\n            encoded_string += s[i]\n        else:\n            encoded_string += s[i] + s[i + 1]\n    return encoded_string\n"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n):\n    if n <= 1:\n        return n\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    \"\"\"\n    This function takes a list of integers as an input and returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n):\n    # TODO\n    pass\n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l):\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    This function takes a list of integers as an input and\n    returns True if there are two distinct elements in the list\n    that sum to zero, and False otherwise.\n    \"\"\"\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return False\n    if l[0] == l[1]:\n        return False\n    for i in range(2, len(l)):\n        if l[i]!= l[i-1] and l[i]!= l[i-2]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/44", "completion": "def change_base(x, base):\n    return str(base * x)\n"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return (a*h)/2\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2)\n"}
{"task_id": "HumanEval/47", "completion": "def median(l):\n    if len(l) == 0:\n        return None\n    else:\n        return sorted(l)[len(l)//2]\n"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "def modp(n, p):\n    return (pow(2, n, p)) % p\n"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s):\n    encoded_string = \"\"\n    for char in s:\n        encoded_string += chr(ord(char) + 5)\n    return encoded_string\n"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiou'\n    return text.replace(vowels, '')\n"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l, t):\n    for i in l:\n        if i < t:\n            return False\n    return True\n"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/55", "completion": "def fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    return all(bracket in brackets for bracket in [\"<\", \">\"])\n"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l):\n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(set(l1 + l2))\n"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    \"\"\"\n    Returns the largest prime factor of n. Assume n > 1 and is not a prime.\n    \"\"\"\n    # Initialize the largest prime factor\n    largest_prime_factor = 0\n    # Iterate through the numbers from 2 to n\n    for i in range(2, n+1):\n        # Check if the number is prime\n        if n % i == 0:\n            # If it is, update the largest prime factor\n            largest_prime_factor = i\n            # Break the loop\n            break\n    return largest_prime_factor\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n):\n    return n + sum_to_n(n-1)\n"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets):\n    for bracket in brackets:\n        if bracket == \"(\":\n            if brackets.count(\")\")!= brackets.count(\")\"):\n                return False\n        elif bracket == \")\":\n            if brackets.count(\"(\")!= brackets.count(\")\"):\n                return False\n    return True\n"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    \"\"\"\n    This function takes a list of coefficients as input and returns the derivative of the polynomial.\n    \"\"\"\n    return [x[1] for x in xs]\n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\n"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[::shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum([ord(c) for c in s])\n"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    total_apples = 0\n    total_oranges = 0\n    for i in range(len(s)):\n        if s[i] == 'a':\n            total_apples += 1\n        elif s[i] == 'o':\n            total_oranges += 1\n    return total_apples - total_oranges\n"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    # Initialize the result list\n    result = []\n    # Iterate over the array\n    for i in range(len(arr)):\n        # Find the smallest even value\n        smallest_even = arr[i]\n        # Iterate over the array\n        for j in range(i+1, len(arr)):\n            # Check if the current node is even\n            if arr[j] % 2 == 0:\n                # If yes, add the node to the result list\n                if arr[j] < smallest_even:\n                    smallest_even = arr[j]\n                    result.append([smallest_even, j])\n    return result\n"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    \"\"\"\n    This function takes a non-empty list of positive integers and returns the greatest integer that is greater than zero, \n    and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    \"\"\"\n    # Initialize the result\n    result = -1\n    # Iterate over the list\n    for i in lst:\n        # Check if the number is greater than zero\n        if i > 0:\n            # If the number is greater than zero, update the result\n            result = max(result, i)\n    return result"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    return sorted(lst, key=lambda x: x if x < 0 else -x)\n"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return (a * b * c) / 2\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if len(q) == 0:\n        return False\n    if sum(q) <= w:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    # Create a dictionary to store the number of elements that need to be changed\n    change_count = {}\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the number of elements that need to be changed is less than the number of elements in the array\n        if change_count[arr[i]] < len(arr) - i:\n            # Update the count\n            change_count[arr[i]] = len(arr) - i\n    \n    # Return the minimum number of elements that need to be changed\n    return min(change_count.values())\n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst2\n"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    if a == 0:\n        return False\n    elif a == 1:\n        return True\n    else:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if n == 0:\n        return True\n    elif n == 1:\n        return x == 1\n    else:\n        return is_simple_power(x, n-1) and is_simple_power(x, n)\n"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return a == a**3\n"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    # get the number of digits\n    digits = len(num)\n    # get the number of primes\n    prime_count = 0\n    # get the number of hexadecimal digits\n    hex_count = 0\n    # iterate over the number of digits\n    for i in range(0, digits):\n        # if the number is prime\n        if num[i] == 'A':\n            prime_count += 1\n        # if the number is not prime\n        else:\n            # if the number is not a prime\n            if num[i] == 'B':\n                hex_count += 1\n            # if the number is not a prime\n            else:\n                # if the number is not a prime\n                if num[i] == 'C':\n                    hex_count += 1\n                # if the number is not a prime\n                else:\n                    # if the number is not a prime\n                    if num[i] == 'D':\n                        hex_count += 1\n                    # if the number is not a prime\n                    else:\n                        # if the number is not a prime\n                        if num[i] == 'E':\n                            hex_count += 1\n                        # if the number is not a prime\n                        else:\n                            # if the number is not a prime\n                            if num[i] == 'F':\n                                hex_count += 1\n    # return the number of primes\n    return prime_count\n"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary_string = \"\"\n    while decimal > 0:\n        binary_string = str(decimal % 2) + binary_string\n        decimal //= 2\n    return binary_string\n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)):\n        if s[i]!= s[i+1] and s[i]!= s[i+2]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"\n    This function takes a list of GPA and returns a list of letter grades\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade > 3.0:\n            letter_grades.append('A+')\n        elif grade > 3.5:\n            letter_grades.append('A')\n        elif grade > 3.0:\n            letter_grades.append('B')\n        elif grade > 2.5:\n            letter_grades.append('B')\n        elif grade > 2.0:\n            letter_grades.append('C')\n        elif grade > 1.5:\n            letter_grades.append('C')\n        elif grade > 1.0:\n            letter_grades.append('D')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    if len(string) == 0:\n        return False\n    for i in range(2, int(string**0.5)+1):\n        if string.count(i) == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, n+1):\n        if i % 10 == 1:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    total = 0\n    while N > 0:\n        total += N % 2\n        N //= 2\n    return total\n"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    even_indices = []\n    odd_indices = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even_indices.append(lst[i])\n        else:\n            odd_indices.append(lst[i])\n    return even_indices + odd_indices\n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return ''.join(sorted(s.split(), key=str.lower))\n"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    This function takes a 2 dimensional data and a number x as input,\n    and returns a list of tuples, [(x1, y1), (x2, y2)...]\n    where each tuple is a coordinate - (row, columns), starting with 0.\n    \"\"\"\n    # Sort coordinates initially by rows in ascending order\n    lst.sort(key=lambda x: x[0])\n    # Sort coordinates of the row by columns in descending order\n    lst.sort(key=lambda x: x[1])\n    return lst"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    array.sort(key=lambda x: x % 2)\n    return array\n"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_string = ''\n    for char in s:\n        encrypted_string += alphabet[(alphabet.index(char) + 2) % 26]\n    return encrypted_string\n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] < lst[j]:\n                return lst[i]\n    return None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    words = S.split('.')\n    count = 0\n    for word in words:\n        if word == 'I':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if x == y == z:\n        return True\n    elif x + y + z == 0:\n        return False\n    else:\n        return True\n"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    message = message.lower()\n    vowels = 'aeiou'\n    encoded_message = ''\n    for letter in message:\n        if letter in vowels:\n            encoded_message += letter\n        else:\n            encoded_message += 'x'\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    largest = 0\n    for i in lst:\n        if i > largest:\n            largest = i\n    return largest\n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if type(key)!= str:\n            return False\n    return True\n"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    prime_numbers = []\n    for i in range(2, n+1):\n        if all(i % j for j in range(2, i)):\n            prime_numbers.append(i)\n    return prime_numbers\n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return int(a) * int(b)\n"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] >= 'A' and s[i] <= 'Z':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    \"\"\"\n    if value == \"\":\n        return 0\n    elif value.isdigit():\n        return int(value)\n    else:\n        return closest_integer(value[1:]) + closest_integer(value[0:-1])\n"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    result = []\n    for i in range(1, n+1):\n        result.append(i)\n    return result\n"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = s.split(', ')\n    return words\n"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        return y\n    else:\n        return x\n"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        return int(bin(n + m - 1)[2:])\n"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"\n    Given a list of positive integers x, return a sorted list of all \n    elements that hasn't any even digit.\n    \"\"\"\n    return [x for x in x if x % 10!= 0]"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    arr.sort()\n    return arr\n"}
{"task_id": "HumanEval/106", "completion": "def factorial(n):\n    fact = [1]\n    for i in range(2, n+1):\n        fact.append(fact[i-1] * i)\n    return fact"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_odd_palindromes = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_odd_palindromes.append(i)\n        else:\n            odd_palindromes = []\n            for j in range(1, i//2 + 1):\n                if j % 2 == 0:\n                    odd_palindromes.append(j)\n            even_odd_palindromes.extend(odd_palindromes)\n    return even_odd_palindromes\n"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Function to count the number of elements which have a sum of digits > 0\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr)):\n            if arr[i] > arr[i+1]:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n                return True\n        return False\n"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    if len(lst1) % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    d = {}\n    for i in test:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = \"\"\n    for i in range(len(s) - 1, -1, -1):\n        result += s[i]\n    if c == result:\n        return (result, True)\n    else:\n        return (result, False)\n"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [str(i).replace('0', '1').replace('1', '0') for i in lst]\n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        min_sum = min(min_sum, nums[i])\n        if min_sum == 0:\n            return 0\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    # Initialize the buckets\n    buckets = [[] for _ in range(capacity + 1)]\n    \n    # Initialize the buckets\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 0:\n                buckets[0].append((i, j))\n            elif grid[i][j] == 1:\n                buckets[grid[i][j]].append((i, j))\n    \n    # Initialize the buckets\n    for i in range(1, capacity + 1):\n        for bucket in buckets:\n            if i - bucket[0] >= 0:\n                buckets[i] = bucket + buckets[i - bucket[0]]\n    \n    # Initialize the buckets\n    for i in range(1, capacity + 1):\n        for bucket in buckets:\n            if i - bucket[0] >= 0:\n                buckets[i] = bucket + buckets[i - bucket[0]]\n    \n    # Initialize the buckets\n    for i in range(1, capacity + 1):\n        for bucket in buckets:\n            if i - bucket[0] >= 0:\n                buckets[i] = bucket + buckets[i - bucket[0]]\n    \n    # Initialize the buckets\n    for i in range(1, capacity + 1):\n        for bucket in buckets:\n            if i - bucket[0] >= 0:\n                buckets[i] = bucket + buckets[i - bucket[0]]\n    \n    # Initialize the buckets\n    for i in range(1, capacity + 1):\n        for bucket in buckets:\n            if i - bucket[0] >= 0:\n                buckets[i] = bucket + buckets[i - bucket[0]]\n    \n    # Initialize the buckets\n    for i in range(1, capacity + 1):\n        for bucket in buckets:\n            if i - bucket[0] >= 0:\n                buckets[i] = bucket + buckets[i - bucket[0]]\n    \n    # Initialize the buckets\n    for i in range(1, capacity + 1):\n        for bucket in buckets:\n            "}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    # Sort the array in ascending order\n    arr.sort()\n    # Return the sorted array\n    return arr\n"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = []\n    for word in s.split():\n        if len(word) >= n:\n            words.append(word)\n    return words\n"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    left_vowel = word[0]\n    right_vowel = word[-1]\n    left_index = vowels.index(left_vowel)\n    right_index = vowels.index(right_vowel)\n    if left_index == right_index:\n        return \"\"\n    else:\n        return word[left_index + 1:right_index]\n"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    stack = []\n    for i in lst:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    # Create a sorted list of the maximum k numbers\n    max_list = []\n    for i in range(len(arr)):\n        if i < k:\n            max_list.append(arr[i])\n        else:\n            max_list.append(arr[i])\n            \n    # Return the sorted list\n    return max_list\n"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    even_sum = 0\n    odd_sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return even_sum + odd_sum\n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    # Initialize the sum\n    sum = 0\n    # Iterate over the array\n    for i in range(len(arr)):\n        # Check if the element is at least two digits\n        if len(arr[i]) >= k:\n            # Add the element to the sum\n            sum += int(arr[i][:k])\n    return sum\n"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(3*i)\n    return result\n"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if len(date) == 0:\n        return False\n    if not date.isdigit():\n        return False\n    if int(date) < 1 or int(date) > 31:\n        return False\n    if int(date[0:2]) < 1 or int(date[0:2]) > 12:\n        return False\n    if int(date[2:4]) < 1 or int(date[2:4]) > 31:\n        return False\n    if int(date[4:6]) < 1 or int(date[4:6]) > 30:\n        return False\n    if int(date[6:8]) < 1 or int(date[6:8]) > 31:\n        return False\n    if int(date[8:10]) < 1 or int(date[8:10]) > 30:\n        return False\n    if int(date[10:12]) < 1 or int(date[10:12]) > 31:\n        return False\n    return True\n"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    words = txt.split()\n    return [word.lower() for word in words if word.isalpha()]\n"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) == 1:\n        return True\n    else:\n        for i in range(len(lst)):\n            if lst[i]!= lst[i+1]:\n                return False\n        return True\n"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    This function takes an array arr as input and returns the sum of magnitudes of integers multiplied by product of all signs\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    \n    # Initialize sum of magnitudes\n    sum = 0\n    \n    # Iterate over the array\n    for num in arr:\n        # Check if the sign of the number is positive\n        if num > 0:\n            # Add the number to the sum\n            sum += num\n        \n        # Check if the sign of the number is negative\n        elif num < 0:\n            # Add the number to the sum\n            sum -= num\n    \n    return sum\n"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    # Initialize the list of values\n    lst_A = []\n    lst_B = []\n    \n    # Iterate over the grid\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            # If the cell is empty, add it to the list\n            if grid[i][j] == 0:\n                lst_A.append(grid[i][j])\n            # Else, add the value to the list\n            else:\n                lst_B.append(grid[i][j])\n    \n    # Initialize the minimum path\n    lst_min_path = lst_A\n    \n    # Iterate over the list of values\n    for i in range(k):\n        # If the list is empty, add the minimum path to the list\n        if lst_A == []:\n            lst_min_path = lst_B\n        # Else, add the value to the list\n        else:\n            lst_min_path.append(lst_B[0])\n            # Remove the first element from the list\n            lst_B.pop(0)\n    \n    return lst_min_path\n"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        return [tri(n-1) + tri(n-2) + tri(n+1)]\n"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    if n == 0:\n        return 0\n    else:\n        return n * digits(n-1)\n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n        elif bracket == '[':\n            stack.append(bracket)\n    if stack:\n        return False\n    else:\n        return True\n"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum of squared numbers in the given list.\n    \"\"\"\n    # TODO\n    return sum([x**2 for x in lst])\n"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if txt[-1] in 'aeiou':\n        return False\n    else:\n        return True\n"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return -1\n    return 0\n"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return (lst[0], lst[0])\n    else:\n        max_val = lst[0]\n        min_val = lst[0]\n        for i in range(1, len(lst)):\n            if lst[i] > max_val:\n                max_val = lst[i]\n            elif lst[i] < min_val:\n                min_val = lst[i]\n        return (max_val, min_val)\n"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if type(a) == type(b):\n        return max(a, b)\n    else:\n        return None\n"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"\n    This function will solve the given problem\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    return text.replace(\" \", \"_\")\n"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if len(file_name) < 3:\n        return 'Yes'\n    else:\n        return 'No'\n"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n    \n    Args: \n        lst (list): list of integers\n    \n    Returns:\n        int: sum of all entries\n    \"\"\"\n    sum = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            sum += i\n    return sum\n"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_numbers = [2]\n    for word in words:\n        if len(word) == 1:\n            prime_numbers.append(2)\n        else:\n            prime_numbers.append(int(word))\n    return \"\".join(prime_numbers)\n"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    if n == 0:\n        return True\n    else:\n        return simplify(x, n / n)\n"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    This function sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    \"\"\"\n    nums.sort(key=lambda x: x % 10)\n    return nums\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 == 0 and num % 10!= 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [1, 3, 7, 13, 21]\n    for i in range(2, n+1):\n        a.append(a[i-2] + a[i-1] + a[i])\n    return a[n]\n"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    \"\"\"\n    Function to solve the following problem:\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    \"\"\"\n    # Initialize the result\n    result = []\n    # Iterate through the planets\n    for planet1 in planet1.split():\n        for planet2 in planet2.split():\n            # Check if the planets are the same\n            if planet1 == planet2:\n                # Add the planet to the result\n                result.append((planet1, planet2))\n    # Return the result\n    return tuple(result)"}
{"task_id": "HumanEval/149", "completion": "def list_sort(lst):\n    # delete duplicates\n    lst = list(set(lst))\n    # sort by length\n    lst.sort(key=len)\n    return lst\n"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n % 2 == 0:\n        return y\n    else:\n        return x\n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    if len(lst) == 0:\n        return 0\n    else:\n        return sum([x**2 for x in lst if x % 2!= 0])\n"}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n    \"\"\"\n    Compare two arrays of scores and guesses of equal length\n    \"\"\"\n    # Initialize the result array\n    result = [0] * len(game)\n    \n    # Compare the scores\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result[i] = 0\n        else:\n            result[i] = abs(guess[i] - game[i])\n    \n    # Return the result\n    return result\n"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    # Initialize the strength\n    CAP = 0\n    SM = 0\n    # Iterate over the extensions\n    for extension in extensions:\n        # Get the strength\n        CAP += len(extension)\n        SM += len(extension)\n    # Return the strongest extension\n    return class_name.StrongestExtensionName\n"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if a == b:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in range(num+1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(num):\n    roman = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        9: 'IX',\n        10: 'X',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C',\n        400: 'CD',\n        500: 'D',\n        900: 'CM',\n        1000: 'M'\n    }\n    return roman[num]\n"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if a == b and b == c:\n        return True\n    elif a == b or b == c or a == c:\n        return False\n    else:\n        return True\n"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_char = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_char:\n            max_char = len(word)\n            max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if number < 0 or need < 0 or remaining < 0:\n        return [0, 0]\n    \n    total_eaten = 0\n    remaining_eaten = 0\n    \n    while remaining > 0:\n        remaining -= need\n        total_eaten += need\n        remaining_eaten += need\n        \n    return [total_eaten, remaining_eaten]\n"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = 0\n    for i in range(len(operator)):\n        result += operator[i] * operand[i]\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if s[0] is not 'a' or s[-1] is not 'c':\n        return s[::-1]\n    else:\n        return s[::-1].upper()\n"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    even_digits = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits\n"}
