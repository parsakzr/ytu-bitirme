{"task_id": "HumanEval/0", "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                result.append(''.join(stack))\n                stack = []\n    return result\n"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    return number - int(number)\n"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_depth = 0\n    depth = 0\n    result = []\n    for paren in paren_string.split():\n        if paren == '(':\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif paren == ')':\n            depth -= 1\n        result.append(max_depth)\n    return result\n"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)\n"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = 0\n    max_so_far_index = 0\n    max_so_far_list = []\n    for i, num in enumerate(numbers):\n        if num > max_so_far:\n            max_so_far = num\n            max_so_far_index = i\n        max_so_far_list.append(max_so_far)\n    return max_so_far_list\n"}
{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n"}
{"task_id": "HumanEval/11", "solution": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    return''.join(str(i) for i in range(n+1))\n"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    distinct_characters = set(string.lower())\n    return len(distinct_characters)\n"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count\n"}
{"task_id": "HumanEval/19", "solution": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numbers = numbers.split()\n    numbers.sort()\n    return''.join(numbers)\n"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    numbers.sort()\n    min_diff = float('inf')\n    min_pair = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    length = 0\n    for char in string:\n        length += 1\n    return length\n"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "HumanEval/26", "solution": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n"}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "solution": "import math\n\ndef poly(xs: list, x: float):\n    result = 0\n    for i in range(len(xs)):\n        result += xs[i] * math.pow(x, i)\n    return result\n"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list):\n    l_sorted = sorted(l)\n    l_third = [l_sorted[i] if i % 3!= 0 else l[i] for i in range(len(l))]\n    return l_third\n"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    return sorted(list(set(l)))\n"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    max_val = l[0]\n    for i in l:\n        if i > max_val:\n            max_val = i\n    return max_val\n"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n    l' = l[:]\n    for i in range(len(even_indices)):\n        l'[even_indices[i]] = even_values[i]\n    return l'\n"}
{"task_id": "HumanEval/38", "solution": "def encode_cyclic(s: str):\n    encoded = ''\n    for i in range(0, len(s), 3):\n        encoded += s[i:i+3][::-1]\n    return encoded\n"}
{"task_id": "HumanEval/39", "solution": "def prime_fib(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n    \n    i = 0\n    while True:\n        fib_num = fibonacci(i)\n        if is_prime(fib_num):\n            n -= 1\n            if n == 0:\n                return fib_num\n        i += 1\n"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int):\n    return n\n"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int):\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return \"\".join(digits[::-1])\n"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "solution": "def fib4(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n"}
{"task_id": "HumanEval/47", "solution": "def median(l):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str):\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return (modp(n-1, p) * modp(n-2, p)) % p\n"}
{"task_id": "HumanEval/50", "solution": "def encode_shift(s: str):\n    encoded_str = \"\"\n    for char in s:\n        if char.isalpha():\n            char_code = ord(char) + 5\n            if char.isupper():\n                if char_code > ord('Z'):\n                    char_code -= 26\n                elif char_code < ord('A'):\n                    char_code += 26\n            else:\n                if char_code > ord('z'):\n                    char_code -= 26\n                elif char_code < ord('a'):\n                    char_code += 26\n            encoded_str += chr(char_code)\n        else:\n            encoded_str += char\n    return encoded_str\n"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True\n"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int):\n    return x + y\n"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str):\n    if len(s0)!= len(s1):\n        return False\n    for c0, c1 in zip(s0, s1):\n        if c0!= c1:\n            return False\n    return True\n"}
{"task_id": "HumanEval/55", "solution": "def fib(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list):\n    if len(l) < 2:\n        return True\n    \n    increasing = l[0] < l[1]\n    \n    for i in range(1, len(l)):\n        if (l[i] > l[i-1])!= increasing:\n            return False\n    \n    return True\n"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))\n"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    return n * (n + 1) // 2\n"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]\n"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    vowels = 'aeiouy'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s,n):\n    apples, oranges = s.split(\" and \")\n    apples = int(apples.strip())\n    oranges = int(oranges.strip())\n    mangoes = n - apples - oranges\n    return mangoes\n"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    even_nodes = [node for node in arr if node % 2 == 0]\n    if not even_nodes:\n        return []\n    else:\n        smallest_even = min(even_nodes)\n        smallest_even_index = arr.index(smallest_even)\n        return [smallest_even, smallest_even_index]\n"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    for num in sorted(freq.keys(), reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1\n"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    sorted_list = []\n    while lst:\n        min_val = min(lst)\n        sorted_list.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_list.append(max_val)\n            lst.remove(max_val)\n    return sorted_list\n"}
{"task_id": "HumanEval/71", "solution": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    return False\n"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    n = len(arr)\n    dp = [[0]*n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 0\n    \n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i+1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]\n"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) < sum(len(s) for s in lst2):\n        return lst1\n    elif sum(len(s) for s in lst1) > sum(len(s) for s in lst2):\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(a):\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for prime in prime_numbers:\n        if a % prime == 0:\n            a = a // prime\n            if a == 1:\n                return True\n    return False\n"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    elif x % n!= 0:\n        return False\n    else:\n        return is_simple_power(x/n, n)\n"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    if a == 0:\n        return True\n    for i in range(1, int(a**(1/3))+1):\n        if i**3 == a:\n            return True\n    return False\n"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    prime_digits = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for digit in num:\n        if int(digit, 16) in prime_digits:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"\n"}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "solution": "def prime_length(string):\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    binary_sum = 0\n    while N > 0:\n        binary_sum += N % 2\n        N //= 2\n    return str(binary_sum)\n"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    words = s.split()\n    new_words = []\n    for word in words:\n        new_word = ''.join(sorted(word))\n        new_words.append(new_word)\n    return''.join(new_words)\n"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))\n"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    if sum(array[0], array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array\n"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        index = alphabet.find(char)\n        if index == -1:\n            encrypted += char\n        else:\n            new_index = (index + 2) % 26\n            encrypted += alphabet[new_index]\n    return encrypted\n"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    second_smallest = min(lst)\n    return second_smallest\n"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    count = 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    if (x == y + z) or (y == x + z) or (z == x + y):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            return True\n    return False\n"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                encoded_message += chr((ord(char) - 97 + 2) % 26 + 97)\n        elif char in 'aeiouAEIOU':\n            encoded_message += chr((ord(char) - 97 + 2) % 26 + 97)\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "solution": "def skjkasdkd(lst):\n    max_prime = 0\n    for num in lst:\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                max_prime = max(max_prime, num)\n    return sum(int(digit) for digit in str(max_prime))\n"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    first_key = next(iter(dict.keys()))\n    first_key_case = first_key.isupper() or first_key.islower()\n    \n    for key in dict.keys():\n        if key.isupper()!= first_key_case:\n            return False\n    \n    return True\n"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    return (a % 10) * (b % 10)\n"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    try:\n        num = float(value)\n        if num % 1 == 0:\n            return int(num)\n        elif num > 0:\n            return int(num + 0.5)\n        else:\n            return int(num - 0.5)\n    except ValueError:\n        return None\n"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    pile = []\n    for i in range(n):\n        if i % 2 == 0:\n            pile.append(2 * (i + 1))\n        else:\n            pile.append(2 * (i + 1) + 1)\n    return pile\n"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    words = s.split(\",\")\n    words = [word.strip() for word in words]\n    return words\n"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    if x % 2 == 0 and y % 2 == 0:\n        if x > y:\n            return y\n        else:\n            return x\n    else:\n        return -1\n"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return bin(round(avg))\n"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    result = []\n    for num in x:\n        if not any(int(digit) % 2 == 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)\n"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    arr = sorted(arr)\n    arr.reverse()\n    result = []\n    for num in arr:\n        if num >= 1 and num <= 9:\n            result.append([\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num-1])\n    return result\n"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    \n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            break\n    \n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            break\n    \n    return arr == sorted(arr)\n"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    even_lst1 = [x for x in lst1 if x % 2 == 0]\n    even_lst2 = [x for x in lst2 if x % 2 == 0]\n    \n    if len(even_lst1) == 0 or len(even_lst2) == 0:\n        return \"NO\"\n    \n    if len(even_lst1) == len(even_lst2):\n        return \"YES\"\n    \n    if len(even_lst1) > len(even_lst2):\n        return \"YES\"\n    \n    return \"NO\"\n"}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    hist = {}\n    for letter in test.split():\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}\n"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s,c):\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return (result, result == result[::-1])\n"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for string in lst:\n        odd_count = 0\n        for char in string:\n            if int(char) % 2!= 0:\n                odd_count += 1\n        result.append(\"the number of odd elements \" + str(odd_count) + \"n the str\" + str(lst.index(string) + 1) + \" of the input.\")\n    return result\n"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        current_sum = max(current_sum, 0)\n    return min_sum\n"}
{"task_id": "HumanEval/115", "solution": "import math\n\ndef max_fill(grid, bucket_capacity):\n    bucket_count = 0\n    bucket_level = bucket_capacity\n    bucket_level_count = 0\n    bucket_level_max = bucket_capacity\n    bucket_level_min = bucket_capacity\n    bucket_level_max_bucket = bucket_capacity\n    bucket_level_min_bucket = bucket_capacity\n    bucket_level_bucket_count = 0\n    bucket_level_bucket_max = bucket_capacity\n    bucket_level_bucket_min = bucket_capacity\n    bucket_level_bucket_count = 0\n    bucket_level_bucket_max_bucket = bucket_capacity\n    bucket_level_bucket_min_bucket = bucket_capacity\n    bucket_level_bucket_count = 0\n    bucket_level_bucket_max_bucket = bucket_capacity\n    bucket_level_bucket_min_bucket = bucket_capacity\n    bucket_level_bucket_count = 0\n    bucket_level_bucket_max_bucket = bucket_capacity\n    bucket_level_bucket_min_bucket = bucket_capacity\n    bucket_level_bucket_count = 0\n    bucket_level_bucket_max_bucket = bucket_capacity\n    bucket_level_bucket_min_bucket = bucket_capacity\n    bucket_level_bucket_count = 0\n    bucket_level_bucket_max_bucket = bucket_capacity\n    bucket_level_bucket_min_bucket = bucket_capacity\n    bucket_level_bucket_count = 0\n    bucket_level_bucket_max_bucket = bucket_capacity\n    bucket_level_bucket_min_bucket = bucket_capacity\n    bucket_level_bucket_count = 0\n    bucket_level_bucket_max_bucket = bucket_capacity\n    bucket_level_bucket_min_bucket = bucket_capacity\n    bucket_level_bucket_count = 0\n    bucket_level_bucket_max_"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = 0\n        for letter in word:\n            if letter not in \"aeiouAEIOU\":\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = \"aeiou\"\n    closest_vowel = \"\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            closest_vowel = word[i]\n            break\n    return closest_vowel\n"}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    open_parens = 0\n    close_parens = 0\n    for s in lst:\n        for c in s:\n            if c == '(':\n                open_parens += 1\n            elif c == ')':\n                close_parens += 1\n    if open_parens == close_parens:\n        return 'Yes'\n    else:\n        return 'No'\n"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]\n"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2!= 0])\n"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            sum += arr[i]\n    return sum\n"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    odd_collatz = []\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 == 1:\n            odd_collatz.append(n)\n    return sorted(odd_collatz)\n"}
{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False\n"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    if ',' in txt:\n        return txt.split(',')\n    else:\n        return [c for c in txt if c.islower() and ord(c) % 2 == 0]\n"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n"}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    product = 1\n    for sign in signs:\n        product *= sign\n    \n    return sum([abs(x) * product for x in arr])\n"}
{"task_id": "HumanEval/129", "solution": "def minPath(grid, k):\n    # Initialize the result list\n    result = []\n    # Initialize the queue\n    queue = []\n    # Add the starting cell to the queue\n    queue.append(grid[0][0])\n    # Initialize the visited set\n    visited = set()\n    # Initialize the count\n    count = 0\n    # Loop until the queue is empty\n    while queue:\n        # Pop the first element from the queue\n        current = queue.pop(0)\n        # Check if the count is equal to k\n        if count == k:\n            # Return the result\n            return result\n        # Check if the current cell is visited\n        if current in visited:\n            continue\n        # Add the current cell to the visited set\n        visited.add(current)\n        # Loop through the neighbors of the current cell\n        for neighbor in get_neighbors(grid, current):\n            # Add the neighbor to the queue\n            queue.append(neighbor)\n        # Append the current cell to the result\n        result.append(current)\n        # Increment the count\n        count += 1\n"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 1]\n    else:\n        tri_list = [3, 1]\n        for i in range(2, n):\n            if i % 2 == 0:\n                tri_list.append(tri_list[i-1] + tri_list[i-2] + tri_list[i-3])\n            else:\n                tri_list.append(tri_list[i-1] + tri_list[i-2] + tri_list[i-3] + 1)\n        return tri_list\n"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product if product!= 1 else 0\n"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n"}
{"task_id": "HumanEval/133", "solution": "def sum_squares(lst):\n    return sum([int(round(x**2)) for x in lst])\n"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and not last_char.isupper() and not last_char.islower():\n        return True\n    return False\n"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] >= arr[i-1]:\n            return -1\n    return len(arr) - 1\n"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    neg_ints = [x for x in lst if x < 0]\n    pos_ints = [x for x in lst if x > 0]\n    if not neg_ints or not pos_ints:\n        return (None, None)\n    else:\n        return (max(neg_ints), min(pos_ints))\n"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    if type(a) == type(b):\n        return None\n    elif type(a) == str:\n        a = a.replace(\",\", \".\")\n        b = b.replace(\",\", \".\")\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    if n % 2!= 0:\n        return False\n    \n    even_numbers = [2 * i for i in range(1, n // 2 + 1)]\n    \n    for i in range(len(even_numbers)):\n        for j in range(i, len(even_numbers)):\n            for k in range(j, len(even_numbers)):\n                for l in range(k, len(even_numbers)):\n                    if even_numbers[i] + even_numbers[j] + even_numbers[k] + even_numbers[l] == n:\n                        return True\n    return False\n"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result\n"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    new_text = \"\"\n    space_count = 0\n    for char in text:\n        if char == \" \":\n            space_count += 1\n            if space_count <= 2:\n                new_text += \" \"\n        else:\n            space_count = 0\n            new_text += char\n    return new_text\n"}
{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    if len(file_name.split('.')[0]) > 3 or file_name.count('.')!= 1:\n        return 'No'\n    if not file_name.split('.')[0].isalpha() or not file_name.split('.')[1] in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            total += lst[i]**2\n        elif i % 4 == 0 and i % 3!= 0:\n            total += lst[i]**3\n    return total\n"}
{"task_id": "HumanEval/143", "solution": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if len(word) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]:\n            prime_words.append(word)\n    return \" \".join(prime_words)\n"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split(\"/\"))\n    n_num, n_denom = map(int, n.split(\"/\"))\n    \n    if x_denom == n_denom:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 == 1 and (num // 10) % 2 == 1:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start:end+1])\n"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    if n == 2:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return y\n        return x\n"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    return sum([x**2 for x in lst if x > 0 and x % 2 == 1])\n"}
{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result\n"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = ''\n    strongest_extension_strength = 0\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for char in extension:\n            if char.isupper():\n                cap += 1\n            elif char.islower():\n                sm += 1\n        extension_strength = cap - sm\n        if extension_strength > strongest_extension_strength:\n            strongest_extension = class_name + '.' + extension\n            strongest_extension_strength = extension_strength\n    return strongest_extension\n"}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a, b):\n    if b in a:\n        return True\n    for i in range(len(a)):\n        if b in a[i:] + a[:i]:\n            return True\n    return False\n"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000:'m',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'XL',\n        10: 'x',\n        9: 'IX',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    roman_numeral = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    return roman_numeral.lower()\n"}
{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word\n"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    remaining = max(0, remaining - min(need, remaining))\n    return [eaten, remaining]\n"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '/':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result[::-1]\n"}
{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    even_digits = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits\n"}
