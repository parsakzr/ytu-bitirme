{"task_id": "HumanEval/0", "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                raise ValueError(\"Unbalanced parentheses\")\n        else:\n            raise ValueError(\"Invalid character\")\n    if stack:\n        raise ValueError(\"Unbalanced parentheses\")\n    for char in stack:\n        result.append(char)\n    return result"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    return number - int(number)\n\n### Explanation:\n\nThe function takes a positive floating point number as input and returns the decimal part of the number. The integer part is obtained by taking the largest integer smaller than the given number. The decimal part is obtained by subtracting the integer part from the given number."}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    return sum(abs(x - numbers.mean()) for x in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            result.append(numbers[i])\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return []\n            stack.pop()\n    return stack\n\n# Test\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), product(numbers))\n\n# Test\nprint(sum_product([1, 2, 3, 4])) # (10, 24)"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_num = numbers[0]\n    max_list = [max_num]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_num:\n            max_num = numbers[i]\n        max_list.append(max_num)\n    return max_list"}
{"task_id": "HumanEval/10", "solution": "def make_palindrome(string: str) -> bool:\n    string = string.lower()\n    string = string.replace(\" \", \"\")\n    string = string.replace(\".\", \"\")\n    string = string.replace(\",\", \"\")\n    string = string.replace(\"!\", \"\")\n    string = string.replace(\"?\", \"\")\n    string = string.replace(\":\", \"\")\n    string = string.replace(\";\", \"\")\n    string = string.replace(\"\\\"\", \"\")\n    string = string.replace(\"'\", \"\")\n    string = string.replace(\"]\", \"\")\n    string = string.replace(\"[\", \"\")\n    string = string.replace(\"]\", \"\")\n    string = string.replace(\"(\", \"\")\n    string = string.replace(\")\", \"\")\n    string = string.replace(\"{\", \"\")\n    string = string.replace(\"}\", \"\")\n    string = string.replace(\"|\", \"\")\n    string = string.replace(\"~\", \"\")\n    string = string.replace(\"`\", \"\")\n    string = string.replace(\"^\", \"\")\n    string = string.replace(\"_\", \"\")\n    string = string.replace(\"`\", \"\")\n    string = string.replace(\"~\", \"\")\n    string = string.replace(\"`\", \"\")\n    string = string.replace(\"^\", \"\")\n    string = string.replace(\"_\", \"\")\n    string = string.replace(\"`\", \"\")\n    string = string.replace(\"~\", \"\")\n    string = string.replace(\"`\", \"\")\n    string = string.replace(\"^\", \"\")\n    string = string.replace(\"_\", \"\")\n    string = string.replace(\"`\", \"\")\n    string = string.replace(\"~\", \"\")\n    string = string.replace(\"`\", \"\")\n    string = string.replace(\"^\", \"\")\n    string = string.replace(\"_\", \"\")\n    string = string.replace(\"`\", \"\")\n    string = string.replace(\"~\", \"\")\n    string = string.replace(\"`\", \"\")\n    string = string.replace(\"^\", \"\")\n    string = string.replace(\"_\", \"\")\n    string = string.replace(\"`\", \"\")\n    string = string.replace(\"~\", \"\")\n    string = string.replace(\"`\", \"\")\n    string = string.replace(\"^\", \"\")\n    string = string"}
{"task_id": "HumanEval/11", "solution": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(chr(ord(c) ^ ord(d)) for c, d in zip(a, b))\n\n# Test\nprint(string_xor('010', '110')) # 100"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i])\n    return prefixes\n\n# Test\nprint(all_prefixes('abc'))"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))\n\n# Test\nprint(string_sequence(0))\nprint(string_sequence(5))"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    string = string.lower()\n    return len(set(string))\n\n# Test the function\nprint(count_distinct_characters('xyzXYZ')) # 3\nprint(count_distinct_characters('Jerry')) # 4"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = 0\n    beat_list = []\n    for char in music_string:\n        if char == 'o':\n            beat_list.append(4)\n            beats += 4\n        elif char == 'o|':\n            beat_list.append(2)\n            beats += 2\n        elif char == '.':\n            beat_list.append(1)\n            beats += 1\n    return beat_list"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "solution": "from typing import List\n\ndef sort_numbers(numbers: List[str]) -> List[str]:\n    numbers.sort()\n    return numbers"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_numbers = sorted(numbers)\n    return closest_numbers[0], closest_numbers[-1]"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n\n\n# Test the function\nprint(filter_integers(['a', 3.14, 5]))\nprint(filter_integers([1, 2, 3, 'abc', {}, []]))"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    for i in range(n):\n        if n % i == 0:\n            return i\n    return 1\n\nThis function iterates through all the numbers from 1 to n and checks if n is divisible by that number. If it is, it returns that number. If it is not, it returns 1."}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "solution": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(set(numbers))\n\n\n# This code will remove all elements that occur more than once.\n# Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    return string.lower() if string.isupper() else string.upper()"}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n\n# Test\nprint(concatenate([]))\nprint(concatenate(['a', 'b', 'c']))"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    return [x for x in l if x > 0]\n\nThis function takes a list as an input and returns a new list containing only the positive numbers from the original list."}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "solution": "import math\n\ndef find_zero(xs: list, x: float):\n    return sum(xs) * x**len(xs)"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list):\n    l_sorted = sorted(l)\n    l_sorted = l_sorted[:len(l)//3] + l_sorted[len(l)//3:]\n    return l_sorted"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    return sorted(list(set(l)))\n\nThis function takes a list as an input and returns a new list with the unique elements of the original list. It does this by converting the list to a set, which automatically removes any duplicate elements, and then converting the set back to a list. The sorted() function is then used to sort the resulting list."}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n\n# Test\nprint(fizz_buzz(50)) # 0\nprint(fizz_buzz(78)) # 2\nprint(fizz_buzz(79)) # 3"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    l_prime = l[:]\n    l_prime.sort()\n    return l_prime[:len(l)//2] + l[len(l)//2:]"}
{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    Decodes a cyclic encoded string.\n    \"\"\"\n    if len(s) % 3 != 0:\n        raise ValueError(\"String must be a multiple of 3\")\n    decoded = \"\"\n    for i in range(0, len(s), 3):\n        decoded += s[i] + s[i+1] + s[i+2]\n    return decoded\n\n# Example\ns = \"abcdefabcdefabc\"\nprint(decode_cyclic(s)) # Output: \"ababcdababcd\""}
{"task_id": "HumanEval/39", "solution": "def prime_fib(n: int):\n    if n <= 1:\n        return n\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    for i in range(2, n):\n        if fib[i] % 2 == 0:\n            fib[i] = fib[i-1]\n    return fib[n-1]"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int):\n    return n*(n-1)//2\n\nThis function calculates the number of collisions by multiplying the number of cars by the number of cars minus one, and then dividing by 2. This is because each collision involves two cars, and the number of collisions is the number of pairs of cars that can be formed from the total number of cars."}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int):\n    return str(x, base)\n\n\n# Test the function\nprint(change_base(8, 3))\nprint(change_base(8, 2))\nprint(change_base(7, 2))"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    return 0.5 * a * h\n\n### Explanation:\n\nThe formula for the area of a triangle is 0.5 * a * h. The given length of a side is a and the height is h. So, the area of the triangle is 0.5 * a * h."}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int):\n    if n < 4:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"}
{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[(n//2)-1])/2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str):\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int):\n    return (2**n) % p"}
{"task_id": "HumanEval/50", "solution": "def decode_shift(s: str):\n    decoded = \"\"\n    for char in s:\n        if char.isalpha():\n            decoded += chr(ord(char) - 5)\n        else:\n            decoded += char\n    return decoded"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([c for c in text if c not in vowels])\n\n\n# Test the function\nprint(remove_vowels(''))\nprint(remove_vowels(\"abcdef\\nghijklm\"))\nprint(remove_vowels('abcdef'))\nprint(remove_vowels('aaaaa'))\nprint(remove_vowels('aaBAA'))\nprint(remove_vowels('zbcd'))"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int):\n    return x + y\n\n### Output:\n\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n\n\n# Test the function\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'))  # True\nprint(same_chars('abcd', 'dddddddabc'))  # True\nprint(same_chars('dddddddabc', 'abcd'))  # True\nprint(same_chars('eabcd', 'dddddddabc'))  # False\nprint(same_chars('abcd', 'dddddddabce'))  # False\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc'))  # False"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack or stack.pop() != \"<\":\n                return False\n    return len(stack) == 0\n\n\n# Test the function\nprint(correct_bracketing(\"<\"))  # False\nprint(correct_bracketing(\"<>\"))  # True\nprint(correct_bracketing(\"<<><>>\"))  # True\nprint(correct_bracketing(\"><<\"))  # False"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list):\n    if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    if n == 1:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    return sum(range(1, n+1))\n\nThis function takes an integer n as input and returns the sum of numbers from 1 to n."}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return len(stack) == 0\n\n\n# Test the function\nprint(correct_bracketing(\"()\"))  # True\nprint(correct_bracketing(\"(())\"))  # True\nprint(correct_bracketing(\"(())\"))  # False\nprint(correct_bracketing(\"(())\"))  # False"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    return [xs[i] * (i+1) for i in range(len(xs))]"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int):\n    if n <= 2:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "solution": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n\"\"\""}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    x = str(x)\n    x = x[::-1]\n    x = x[:shift] + x[shift:]\n    return x"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s,n):\n    apples, oranges, mangoes = s.split(\" and \")\n    apples, oranges = map(int, apples.split(\" \"))\n    mangoes = int(mangoes)\n    return n - apples - oranges + mangoes\n\n# Test the function\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19)) # 8\nprint(fruit_distribution(\"0 apples and 1 oranges\",3)) # 2\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100)) # 95\nprint(fruit_distribution(\"100 apples and 1 oranges\",120)) # 19"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    if not arr:\n        return []\n    min_even = float('inf')\n    min_even_index = 0\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < min_even:\n            min_even = node\n            min_even_index = i\n    return [min_even, min_even_index]"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    max_val = -1\n    for val in lst:\n        if lst.count(val) >= val:\n            max_val = val\n    return max_val"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    else:\n        return lst[0] + strange_sort_list(lst[1:])"}
{"task_id": "HumanEval/71", "solution": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        return round(0.5 * a * b, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    if q == q[::-1]:\n        return sum(q) <= w\n    else:\n        return False"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    n = len(arr)\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = i\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if arr[i-1] == arr[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    return dp[n][n]\n\n# Test the function\narr = [1, 2, 3, 5, 4, 7, 9, 6]\nprint(smallest_change(arr)) # Output: 4"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    lst1_chars = sum([len(s) for s in lst1])\n    lst2_chars = sum([len(s) for s in lst2])\n    if lst1_chars < lst2_chars:\n        return lst1\n    elif lst1_chars > lst2_chars:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(a):\n    if a < 3:\n        return False\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            return False\n    return True\n\n\ndef is_multiply_prime(a):\n    if a < 3:\n        return False\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    return n**int(x) == x"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    return a == a**3\n\nThis function checks if the given number is a cube of some integer number. If it is, it returns True, otherwise it returns False."}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    prime_count = 0\n    for i in range(len(num)):\n        if num[i] in \"2357ABCDEF\":\n            prime_count += 1\n    return prime_count\n\n# Test the function\nprint(hex_key(\"AB\")) # 1\nprint(hex_key(\"1077E\")) # 2\nprint(hex_key(\"ABED1A33\")) # 4\nprint(hex_key(\"123456789ABCDEF0\")) # 6\nprint(hex_key(\"2020\")) # 2"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n\n# Test the function\nprint(decimal_to_binary(15)) # Output: db1111db\nprint(decimal_to_binary(32)) # Output: db100000db"}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "solution": "def prime_length(string):\n    if len(string) == 2:\n        return True\n    for i in range(2, int(len(string)/2)+1):\n        if string % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**n, 10**(n+1)):\n        if i % 10 == 0 or i // 10 == 0:\n            count += 1\n    return count\n\nThis function takes an integer n as input and returns the count of the numbers of n-digit positive integers that start or end with 1. It does this by iterating over all numbers from 10^n to 10^(n+1) and checking if the number starts or ends with 1. If it does, the count is incremented."}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    sum = 0\n    while N > 0:\n        sum += N % 2\n        N //= 2\n    return bin(sum)[2:]"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = ''.join(sorted(words[i]))\n    return ' '.join(words)"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    \"\"\"\n    This function takes a 2 dimensional data, as a nested lists,\n    and an integer x, and returns a list of tuples, [(x1, y1), (x2, y2) ...]\n    such that each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    if not lst:\n        return []\n    else:\n        return sorted(lst, key=lambda x: (x[0], x[1]))\n\n# Test the function\nprint(get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1))\nprint(get_row([], 1))\nprint(get_row([[], [1], [1, 2, 3]], 3))"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    if sum(array) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    s = s.lower()\n    s = ''.join(chr(ord(c) + 2**2) for c in s)\n    return s\n\n# Test\nprint(encrypt('hi')) # lm\nprint(encrypt('asdfghjkl')) # ewhjklnop\nprint(encrypt('gf')) # kj\nprint(encrypt('et')) # ix"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]\n\n# Test\nprint(next_smallest([1, 2, 3, 4, 5])) # 2\nprint(next_smallest([5, 1, 4, 3, 2])) # 2\nprint(next_smallest([])) # None\nprint(next_smallest([1, 1])) # None"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\n# Test the function\nS = \"The sky is blue. The sun is shining. I love this weather\"\nprint(is_bored(S)) # 1"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    return (x == y + z) and (x.isdigit() and y.isdigit() and z.isdigit())\n\n\n# Test the function\nprint(any_int(5, 2, 7))  # True\nprint(any_int(3, 2, 2))  # False\nprint(any_int(3, -2, 1))  # True\nprint(any_int(3.6, -2.2, 2))  # False"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    vowels = 'aeiou'\n    encoded = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded += chr(ord(char) + 2)\n            else:\n                encoded += chr(ord(char) - 2)\n        else:\n            encoded += char\n    return encoded"}
{"task_id": "HumanEval/94", "solution": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    def sum_digits(n):\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        return sum\n    return sum([is_prime(n) for n in lst]) + sum([sum_digits(n) for n in lst])\n\n# Test the function\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])) # 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])) # 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])) # 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])) # 11\nprint(skjkasdkd([0,81,12,3,1,21])) # 3\nprint(skjkasdkd([0,8,1,2,1,7])) # 7"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(dict):\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str) or not key.isalpha():\n            return False\n    return True"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    a_digit = a % 10\n    b_digit = b % 10\n    return a_digit * b_digit"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in 'AEIOUaeiou':\n            count += 1\n    return count\n\n# Test\nprint(count_upper('aBCdEf')) # 1\nprint(count_upper('abcdefg')) # 0\nprint(count_upper('dBBE')) # 0"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    if value.isdigit():\n        return int(value)\n    else:\n        return round(float(value))"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n, n+2, n+4]\n    else:\n        return [n, n+2, n+4, n+6]"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return s.split()"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    if x % 2 == 0 and y % 2 == 0:\n        return x\n    elif x % 2 == 0 and y % 2 != 0:\n        return y\n    elif x % 2 != 0 and y % 2 == 0:\n        return y\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        sum = 0\n        for i in range(n, m+1):\n            sum += i\n        avg = sum/m\n        return bin(int(round(avg)))[2:]\n\n# Test the function\nprint(rounded_avg(1, 5)) # 0b11\nprint(rounded_avg(7, 5)) # -1\nprint(rounded_avg(10, 20)) # 0b1111\nprint(rounded_avg(20, 33)) # 0b11010"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    return sorted(filter(lambda x: x % 10 != 0, x))"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    if not arr:\n        return []\n    if any(x < 1 or x > 9 for x in arr):\n        return ['One']\n    arr.sort()\n    arr.reverse()\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'][::-1]"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(1)\n            for j in range(2, i+1):\n                result.append(result[j-1] * j)\n        else:\n            result.append(0)\n            for j in range(1, i+1):\n                result.append(result[j-1] + j)\n    return result"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if i == i[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n        sum_digits = sum(int(digit) for digit in str(num))\n        if sum_digits > 0:\n            count += 1\n    return count\n\n# Test the function\nprint(count_nums([-1, 11, -11])) # 1\nprint(count_nums([1, 1, 2])) # 3"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n\ndef move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\""}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    # split the string into a list of characters\n    test_list = test.split()\n    # create an empty dictionary\n    histogram = {}\n    # iterate over the list of characters\n    for char in test_list:\n        # check if the character is in the dictionary\n        if char in histogram:\n            # if it is, increment the count\n            histogram[char] += 1\n        else:\n            # if it is not, add the character to the dictionary with a count of 1\n            histogram[char] = 1\n    # return the dictionary\n    return histogram"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s,c):\n    s = s.lower()\n    c = c.lower()\n    s = ''.join(c not in s for c in c)\n    return s, s == s[::-1]\n\n\n# Test\nprint(reverse_delete('abcde','ae')) # ('bcd',False)\nprint(reverse_delete('abcdef','b')) # ('acdef',False)\nprint(reverse_delete('abcdedcba','ab')) # ('cdedc',True)"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    return [f\"the number of odd elements {len(list(filter(lambda x: int(x) % 2 == 1, lst[i])))n the str{i}ng {i} of the input.\" for i in range(len(lst))]"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum, nums[i] + min_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "solution": "import math\n\ndef max_fill(grid, capacity):\n    n, m = len(grid), len(grid[0])\n    bucket_capacity = capacity\n    bucket_count = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                bucket_count += 1\n                if bucket_count > bucket_capacity:\n                    bucket_count = bucket_capacity\n                grid[i][j] = 0\n    return bucket_count"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    arr.sort(key=lambda x: (x & 1, x))\n    return arr\n\nThis code sorts the array based on the number of ones in the binary representation of the number. If two numbers have the same number of ones, it sorts them based on their decimal value."}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for i in range(len(word)):\n            if word[i] in \"abcdefghijklmnopqrstuvwxyz\":\n                count += 1\n        if count == n:\n            result.append(word)\n    return result\n\n# Test the function\nprint(select_words(\"Mary had a little lamb\", 4)) # ['little']\nprint(select_words(\"Mary had a little lamb\", 3)) # ['Mary', 'lamb']\nprint(select_words(\"simple white space\", 2)) # []\nprint(select_words(\"Hello world\", 4)) # ['world']\nprint(select_words(\"Uncle sam\", 3)) # ['Uncle']"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    vowel_list = []\n    for i in range(len(word)-2):\n        if word[i] in vowels and word[i+1] in vowels and word[i+2] in vowels:\n            vowel_list.append(word[i])\n    if len(vowel_list) == 0:\n        return \"\"\n    else:\n        return vowel_list[0]"}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    if len(lst) != 2:\n        return \"Invalid input\"\n    if lst[0] == lst[1]:\n        return \"Yes\"\n    if lst[0] == '(' and lst[1] == ')':\n        return \"Yes\"\n    return \"No\""}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    arr.sort()\n    return arr[:k]"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1 and i % 2 == 0:\n            sum += lst[i]\n    return sum"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum\n\n# Test\narr = [111,21,3,4000,5,6,7,8,9]\nk = 4\nprint(add_elements(arr, k)) # 24"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    collatz = []\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            collatz.append(n)\n            n = 3 * n + 1\n    collatz.append(1)\n    return sorted(collatz)"}
{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    date_list = date.split('-')\n    month = int(date_list[0])\n    day = int(date_list[1])\n    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    if year % 4 == 0 and month in [4, 6, 9, 11]:\n        if day > 30:\n            return False\n    if year % 100 == 0 and month in [4, 6, 9, 11]:\n        if day > 30:\n            return False\n    if year % 400 == 0:\n        if day > 29:\n            return False\n    return True"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    words = []\n    for i in range(len(txt)):\n        if i == 0 or i == len(txt) - 1:\n            words.append(txt[i])\n        elif ord(txt[i]) == ord('a') or ord(txt[i]) == ord('b') or ord(txt[i]) == ord('c') or ord(txt[i]) == ord('d') or ord(txt[i]) == ord('e') or ord(txt[i]) == ord('f') or ord(txt[i]) == ord('g') or ord(txt[i]) == ord('h') or ord(txt[i]) == ord('i') or ord(txt[i]) == ord('j') or ord(txt[i]) == ord('k') or ord(txt[i]) == ord('l') or ord(txt[i]) == ord('m') or ord(txt[i]) == ord('n') or ord(txt[i]) == ord('o') or ord(txt[i]) == ord('p') or ord(txt[i]) == ord('q') or ord(txt[i]) == ord('r') or ord(txt[i]) == ord('s') or ord(txt[i]) == ord('t') or ord(txt[i]) == ord('u') or ord(txt[i]) == ord('v') or ord(txt[i]) == ord('w') or ord(txt[i]) == ord('x') or ord(txt[i]) == ord('y') or ord(txt[i]) == ord('z'):\n            words.append(txt[i])\n        elif ord(txt[i]) == ord(',') or ord(txt[i]) == ord(' '):\n            words.append(txt[i:i+1])\n    return words\n\n\n# Test the function\nprint(split_words(\"Hello world!\"))  # Output: ['Hello', 'world!']\nprint(split_words(\"Hello,world!\"))  # Output: ['Hello', 'world!']\nprint(split_words(\"abcdef\"))  # Output: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    if len(lst) < 2:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\ndef is_sorted_with_duplicates(lst):\n    if len(lst) < 2:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i+1]:\n            return False\n    return True"}
{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end2 or end1 < start2:\n        return \"NO\"\n    intersection_length = end1 - start1\n    if intersection_length % 2 == 0:\n        return \"NO\"\n    for i in range(3, int(intersection_length/2)+1, 2):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n    prod = 1\n    sum_magnitudes = 0\n    for num in arr:\n        prod *= num\n        sum_magnitudes += abs(num)\n    return sum_magnitudes * prod"}
{"task_id": "HumanEval/129", "solution": "def minPath(grid, k):\n    def dfs(x, y, visited, path):\n        if visited[x][y] or x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):\n            return\n        visited[x][y] = True\n        path.append(grid[x][y])\n        for dx, dy in ((-1, 0), (1, 0), (0, -1), (0, 1)):\n            dfs(x + dx, y + dy, visited, path)\n        visited[x][y] = False\n        path.pop()\n    visited = [[False] * len(grid[0]) for _ in range(len(grid))]\n    path = []\n    dfs(0, 0, visited, path)\n    return sorted(path)"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    else:\n        return [1, n/2] + tri(n-1) + tri(n-2) + tri(n+1)"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    return sum(digit for digit in digits if digit % 2 == 1)\n\n# Test\nprint(digits(1)) # 1\nprint(digits(4)) # 0\nprint(digits(235)) # 15"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    return len(stack) > 0\n\n# Test the function\nprint(is_nested('[[]]'))  # True\nprint(is_nested('[]]]]]]][[[[[]'))  # False\nprint(is_nested('[][]'))  # False\nprint(is_nested('[]'))  # False\nprint(is_nested('[[][]]'))  # True\nprint(is_nested('[[]][['))  # True"}
{"task_id": "HumanEval/133", "solution": "def sum_squares(lst):\n    return sum([round(x) ** 2 for x in lst])\n\n# Test the function\nprint(sum_squares([1, 2, 3])) # 14\nprint(sum_squares([1, 4, 9])) # 98\nprint(sum_squares([1, 3, 5, 7])) # 84\nprint(sum_squares([1.4, 4.2, 0])) # 29\nprint(sum_squares([-2.4, 1, 1])) # 6"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    words = txt.split()\n    return not any(word[-1] in 'abcdefghijklmnopqrstuvwxyz' for word in words)"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    if negatives:\n        return max(negatives), min(positives)\n    elif positives:\n        return min(positives), max(negatives)\n    else:\n        return None, None"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    if isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    elif isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        return max(a, b)\n    else:\n        return None"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n\n\ndef is_equal_to_sum_even(n):\n    if n % 2 == 0:\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_ _\", \"-\")\n    text = text.replace(\"_ _ _\", \"-\")\n    text = text.replace(\"_ _ _ _\", \"-\")\n    text = text.replace(\"_ _ _ _ _\", \"-\")\n    text = text.replace(\"_ _ _ _ _ _\", \"-\")\n    text = text.replace(\"_ _ _ _ _ _ _\", \"-\")\n    text = text.replace(\"_ _ _ _ _ _ _ _\", \"-\")\n    text = text.replace(\"_ _ _ _ _ _ _ _ _\", \"-\")\n    text = text.replace(\"_ _ _ _ _ _ _ _ _ _\", \"-\")\n    text = text.replace(\"_ _ _ _ _ _ _ _ _ _ _\", \"-\")\n    text = text.replace(\"_ _ _ _ _ _ _ _ _ _ _ _\", \"-\")\n    text = text.replace(\"_ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\")\n    text = text.replace(\"_ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\")\n    text = text.replace(\"_ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\")\n    text = text.replace(\"_ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\")\n    text = text.replace(\"_ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\")\n    text = text.replace(\"_ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\")\n    text = text.replace(\"_ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\")\n    text = text.replace(\"_ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\")\n    text = text.replace(\"_ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\")\n    text = text.replace(\"_ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\")\n    text = text.replace(\"_ _ _ _ _ _ _ _ _ _ _ _ _ _\", \"-\")\n    text = text.replace(\"_ _ _ _ _ _ _ _ _ _ _ _"}
{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return \"No\"\n    if file_name.count(\".\") == 0:\n        return \"No\"\n    if not file_name.startswith(string.ascii_lowercase) or not file_name.startswith(string.ascii_uppercase):\n        return \"No\"\n    if file_name.split(\".\")[1] not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    return \"Yes\""}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    sum = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            sum += x**2\n        elif i % 4 == 0 and i % 3 != 0:\n            sum += x**3\n    return sum"}
{"task_id": "HumanEval/143", "solution": "def words_in_sentence(sentence):\n    words = sentence.split()\n    primes = []\n    for word in words:\n        if is_prime(len(word)):\n            primes.append(word)\n    return ' '.join(primes)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    x, n = map(int, x.split('/'))\n    return x * n == int(x * n)\n\nThis function takes two arguments, x and n, which are string representation of a fraction. It first splits the string into numerator and denominator using the '/' character. Then it converts the numerator and denominator to integers using the map() function. Finally, it checks if the product of x and n is equal to the integer representation of the product. If it is, the function returns True, otherwise it returns False."}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    nums.sort(key=lambda x: sum(int(digit) for digit in str(x)))\n    return nums"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 9):\n            count += 1\n    return count\n\n\n# Test the function\nprint(specialFilter([15, -73, 14, -15])) # 1\nprint(specialFilter([33, -2, -3, 45, 21, 109])) # 2"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i*i-i+1 for i in range(1,n+1)]\n    triples = []\n    for i in range(1,n+1):\n        for j in range(i+1,n+1):\n            for k in range(j+1,n+1):\n                if a[i]+a[j]+a[k]%3 == 0:\n                    triples.append((i,j,k))\n    return len(triples)"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    if planet1 == planet2:\n        return (planet1,)\n    planets_between = []\n    for planet in planets:\n        if planet1 < planet < planet2:\n            planets_between.append(planet)\n    planets_between.sort(key=lambda x: planets.index(x))\n    return planets_between"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    if n % 2 == 0:\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if num % 2 == 1 and num > 0 and type(num) == int:\n            result += num**2\n    return result\n\n# Test the function\nprint(double_the_difference([1, 3, 2, 0])) # 10\nprint(double_the_difference([-1, -2, 0])) # 0\nprint(double_the_difference([9, -2])) # 81\nprint(double_the_difference([0])) # 0\nprint(double_the_difference([])) # 0"}
{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    extensions = sorted(extensions, key=lambda x: (len(x.upper()) - len(x.lower()), x))\n    return class_name + '.' + extensions[0]"}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a , b):\n    a = a.lower()\n    b = b.lower()\n    a_len = len(a)\n    b_len = len(b)\n    if a_len < b_len:\n        a, b = b, a\n    for i in range(a_len):\n        if a[i:i+b_len] == b:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    roman_dict = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n    roman_string = ''\n    while number > 0:\n        roman_string += roman_dict[number % 1000]\n        number //= 1000\n    return roman_string.lower()"}
{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n            max_word = word\n    return max_word\n\n# Test\nprint(find_max([\"name\", \"of\", \"string\"])) # string\nprint(find_max([\"name\", \"enam\", \"game\"])) # enam\nprint(find_max([\"aaaaaaa\", \"bb\", \"cc\"])) # aaaaaaaa\n\n# Explanation\n# The function iterates over the list of words and for each word it checks the number of unique characters.\n# If the number of unique characters is greater than the current maximum, it updates the maximum and the\n# corresponding word. If the number of unique characters is the same as the current maximum, it updates the\n# corresponding word.\n# Finally, the function returns the word with the maximum number of unique characters."}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    if remaining < need:\n        return [number + remaining, 0]\n    else:\n        return [number + remaining - need, remaining - need]"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    \"\"\"\n    This function takes two lists and returns the evaluation of the algebric expression\n    built from the given lists.\n    \"\"\"\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"The length of operator list is equal to the length of operand list minus one.\")\n    if not operator or not operand:\n        raise ValueError(\"Operator list has at least one operator, and operand list has at least two operands.\")\n    if not operator or not operand:\n        raise ValueError(\"Operator list has at least one operator, and operand list has at least two operands.\")\n    if not operator or not operand:\n        raise ValueError(\"Operator list has at least one operator, and operand list has at least two operands.\")\n    if not operator or not operand:\n        raise ValueError(\"Operator list has at least one operator, and operand list has at least two operands.\")\n    if not operator or not operand:\n        raise ValueError(\"Operator list has at least one operator, and operand list has at least two operands.\")\n    if not operator or not operand:\n        raise ValueError(\"Operator list has at least one operator, and operand list has at least two operands.\")\n    if not operator or not operand:\n        raise ValueError(\"Operator list has at least one operator, and operand list has at least two operands.\")\n    if not operator or not operand:\n        raise ValueError(\"Operator list has at least one operator, and operand list has at least two operands.\")\n    if not operator or not operand:\n        raise ValueError(\"Operator list has at least one operator, and operand list has at least two operands.\")\n    if not operator or not operand:\n        raise ValueError(\"Operator list has at least one operator, and operand list has at least two operands.\")\n    if not operator or not operand:\n        raise ValueError(\"Operator list has at least one operator, and operand list has at least two operands.\")\n    if not operator or not operand:\n        raise ValueError(\"Operator list has at least one operator, and operand list has at least two operands.\")\n    if not operator or not operand:\n        raise ValueError(\"Operator list has at least one operator, and operand list has at least two operands.\")\n    if not operator or not operand:\n        raise ValueError(\""}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    if s.isalpha():\n        return s.lower() if s.islower() else s.upper()\n    return s[::-1]"}
{"task_id": "HumanEval/162", "solution": "def string_to_md5(text):\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    digits = []\n    for i in range(a, b+1):\n        digits.append(i % 10)\n    return sorted(digits)\n\n# Test the function\nprint(generate_integers(2, 8)) # Output: [2, 4, 6, 8]\nprint(generate_integers(8, 2)) # Output: [2, 4, 6, 8]\nprint(generate_integers(10, 14)) # Output: []"}
