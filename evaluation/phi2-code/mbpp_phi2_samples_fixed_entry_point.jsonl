{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    return set(list1).intersection(list2)\n\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return True\n    return False\n"}
{"task_id": "Mbpp/4", "solution": "def heap_queue_largest(arr, n):\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, arr[i])\n    largest = []\n    for i in range(n):\n        largest.append(heapq.heappop(heap))\n    return largest\n"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(x, y):\n    xor = x ^ y\n    return xor!= 0 and bin(xor).count('1') == 1\n"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    words = string.split()\n    long_words = [word for word in words if len(word) >= 4]\n    return set(long_words)\n"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num**2 for num in nums]\n"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    n = len(s)\n    for i in range(n):\n        if s[i:] + s[:i] == s:\n            return i\n    return -1\n"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    string = string.replace(char, \"\")\n    string = string.replace(char[::-1], \"\")\n    return string\n\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    sorted_matrix = sorted(matrix, key=sum)\n    return sorted_matrix\n"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    This function takes in the base, height, and length of a triangular prism and returns the volume of the prism.\n    \"\"\"\n    return (base * height * length) / 2\n\nassert find_Volume(10,8,6) == 240\n"}
{"task_id": "Mbpp/16", "solution": "deftext_lowercase_underscore(text):\n    return text.replace(\"_\", \"\").islower()\n\nasserttext_lowercase_underscore(\"aab_cbbbc\")==(True)\n"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length\n"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    result = \"\"\n    for char in s1:\n        if char not in s2:\n            result += char\n    return result\n\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    return len(arr)!= len(set(arr))\n"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(num):\n    if num % 3 == 0 and num % 7 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    rev = int(str(num)[::-1])\n    return num == 2*rev - 1\n"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    digits.sort(reverse=True)\n    return int(''.join(map(str, digits)))\n"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(a, b):\n    if (a < 0 and b > 0) or (a > 0 and b < 0):\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    This function takes an integer n and returns True if n is an octagonal number, False otherwise.\n    \"\"\"\n    return ((3 * n**2 + n) / 2) % 1 == 0\n\ndef nth_octagonal(n):\n    \"\"\"\n    This function takes an integer n and returns the nth octagonal number.\n    \"\"\"\n    return (3 * n**2 + n) / 2\n\nassert is_octagonal(5) == 65\nassert nth_octagonal(5) == 65\n"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(c) for c in substring) == len(substring):\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(nums):\n    smallest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n    return smallest\n\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tup_list):\n    max_diff = 0\n    for tup in tup_list:\n        diff = tup[1] - tup[0]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])) == 7\n"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    marks.sort(key=lambda x: x[1])\n    return marks\n"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    bell = [0] * (n+1)\n    bell[0] = 1\n    bell[1] = 1\n    for i in range(2, n+1):\n        bell[i] = 0\n        for j in range(i):\n            bell[i] += bell[j] * bell[i-j-1]\n    return bell[n]\n\nassert bell_number(2) == 2\n"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    \n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            decreasing = False\n        elif arr[i] < arr[i-1]:\n            increasing = False\n        if not increasing and not decreasing:\n            return False\n    return True\n"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    for i in range(len(lst)-len(sublst)+1):\n        if lst[i:i+len(sublst)] == sublst:\n            return True\n    return False\n\nassert is_sublist([2,4,3,5,7],[3,7])==False\n"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    lengths = [len(t) for t in tuples]\n    return len(set(lengths)) == 1\n"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    gap = len(arr)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        for i in range(len(arr) - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                sorted = False\n    return arr\n"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    for i in range(1, int(n**0.5) + 1):\n        if n - i**2 >= 0 and int((n - i**2)**0.5)**2 == (n - i**2):\n            return True\n    return False\n"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, sequence):\n    if len(patterns)!= len(sequence):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i]!= sequence[i]:\n            return False\n    return True\n"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples, k):\n    result = []\n    for tup in tuples:\n        if all(x % k == 0 for x in tup):\n            result.append(tup)\n    return result\n"}
{"task_id": "Mbpp/77", "solution": "defis_Diff(num):\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit\n        temp //= 10\n    return sum % 11 == 0\n\nassertis_Diff(12345) == False\n"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 == 0\n\nassert word_len(\"Hadoop\") == False\n"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n\nassert tetrahedral_number(5) == 35\n"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3\n\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n"}
{"task_id": "Mbpp/83", "solution": "def get_Char(s):\n    sum = 0\n    for c in s:\n        sum += ord(c)\n    return chr((sum % 26) + ord('a'))\n"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    elif n == 5:\n        return 8\n    elif n == 6:\n        return 10\n    elif n == 7:\n        return 12\n    elif n == 8:\n        return 14\n    elif n == 9:\n        return 16\n    elif n == 10:\n        return 18\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)\n"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2\n"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return n * (2 * n - 1)\n\nassert centered_hexagonal_number(10) == 271\n"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    result = {}\n    for d in [dict1, dict2, dict3]:\n        result.update(d)\n    return result\n\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for i in lst:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    if n == 0:\n        return -1\n    \n    closest = -1\n    for i in range(n-1, 0, -1):\n        if i > 0:\n            closest = i\n            break\n    return closest\n"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"}
{"task_id": "Mbpp/91", "solution": "def find_substring(lst, substr):\n    for s in lst:\n        if substr in s:\n            return True\n    return False\n"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    n_str = str(n)\n    for i in range(1, len(n_str)-1):\n        if n_str[i-1] == n_str[i+1]:\n            return False\n    return True\n"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n\nassert power(3,4) == 81\n"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples):\n    min_val = float('inf')\n    min_index = 0\n    for i, (name, val) in enumerate(tuples):\n        if val < min_val:\n            min_val = val\n            min_index = i\n    return tuples[min_index][0]\n"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lists):\n    min_length = len(lists[0])\n    for lst in lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length\n"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nassert divisor(15) == 4\n"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    freq_dict = {}\n    for lst in lists:\n        for item in lst:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict\n"}
{"task_id": "Mbpp/98", "solution": "def multiply_num(nums):\n    result = 1\n    for num in nums:\n        result *= num\n    return result / len(nums)\n\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary\n"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    n += 1\n    while True:\n        if str(n) == str(n)[::-1]:\n            return n\n        n += 1\n"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    return arr[k-1]\n"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    words = snake_str.split('_')\n    camel_str = words[0]\n    for word in words[1:]:\n        camel_str += word.capitalize()\n    return camel_str\n\nassert snake_to_camel('python_program')=='PythonProgram'\n"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return m\n    else:\n        return m + eulerian_num(n-1, m)\n\nassert eulerian_num(3, 1) == 4\n"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n"}
{"task_id": "Mbpp/105", "solution": "def count(lst):\n    return lst.count(True)\n"}
{"task_id": "Mbpp/106", "solution": "def add_lists(list1, tuple1):\n    return tuple1 + list1\n\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] <= list2[j] and list1[i] <= list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] <= list1[i] and list2[j] <= list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n    return result\n"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, rotation):\n    count = 0\n    for i in range(rotation):\n        if int(binary_string[i]) % 2 == 1:\n            count += 1\n    return count\n\nassert odd_Equivalent(\"011001\",6) == 3\n"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements = common_elements.intersection(set(lst))\n    return common_elements\n\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n"}
{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n"}
{"task_id": "Mbpp/115", "solution": "def empty_dit(dict_list):\n    for d in dict_list:\n        if d:\n            return False\n    return True\n"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    result = 0\n    for i in tup:\n        result = result * 10 + i\n    return result\n\nassert tuple_to_int((1,2,3))==123\n"}
{"task_id": "Mbpp/117", "solution": "def list_to_float(lst):\n    return [(float(x[0]), float(x[1])) for x in lst]\n"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    return string.split()\n\nassert string_to_list(\"python programming\")==['python','programming']\n"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]\n"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples):\n    max_product = 0\n    for tup in tuples:\n        product = tup[0] * tup[1]\n        if product > max_product:\n            max_product = product\n    return max_product\n\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += sum_of_divisors(i)\n    return sum\n\ndef sum_of_divisors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    \"\"\"\n    Returns the angle of a complex number\n    \"\"\"\n    return math.atan2(z.imag, z.real)\n"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    max_diff = 0\n    for i in range(len(binary_string)):\n        for j in range(i+1, len(binary_string)+1):\n            sub_string = binary_string[i:j]\n            diff = abs(sub_string.count(\"0\") - sub_string.count(\"1\"))\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "Mbpp/126", "solution": "def common_divisors(a, b):\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\nassert common_divisors(10, 15) == 6\n"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(x,y):\n    return x*y\n\nassert multiply_int(10,20)==200\n"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    return [word for word in words if len(word) > n]\n"}
{"task_id": "Mbpp/129", "solution": "defmagic_square_test(matrix):\n    n = len(matrix)\n    magic_sum = sum(matrix[0])\n    \n    # Check if all rows and columns sum to the same value\n    for i in range(n):\n        if sum(matrix[i])!= magic_sum or sum(matrix[j][i] for j in range(n))!= magic_sum:\n            return False\n    \n    # Check if the diagonals sum to the same value\n    if sum(matrix[i][i] for i in range(n))!= magic_sum or sum(matrix[i][n-i-1] for i in range(n))!= magic_sum:\n        return False\n    \n    return True\n"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    max_occur = 0\n    max_item = None\n    for item in lst:\n        occur = lst.count(item)\n        if occur > max_occur:\n            max_occur = occur\n            max_item = item\n    return max_item\n"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = set(\"aeiouAEIOU\")\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return \"\".join(s)\n\nassert reverse_vowels(\"Python\") == \"Python\"\n"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)\n\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i','s', 'e','s'))==(\"exercises\")\n"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(nums):\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)\n"}
{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    zero_count = 0\n    non_zero_count = 0\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / non_zero_count\n"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    while n > 0:\n        if n % 2 == 1:\n            return False\n        n = n // 2\n    return True\n"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    result = set()\n    for sublist in lst:\n        for item in sublist:\n            result.add(item)\n    return result\n"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    n = len(arr)\n    for i in range(n-1, 0, -1):\n        max_idx = arr.index(max(arr[:i+1]))\n        if max_idx!= i:\n            arr[:i+1], arr[max_idx+1:i+1] = arr[max_idx+1:i+1][::-1], arr[:i+1][::-1]\n            arr[:i+1], arr[i+1:] = arr[i+1:][::-1], arr[:i+1][::-1]\n    return arr\n\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/143", "solution": "def find_lists(tup):\n    count = 0\n    for item in tup:\n        if isinstance(item, list):\n            count += 1\n    return count\n\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None\n"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(list1, list2):\n    result = []\n    for element in list1:\n        if element not in list2:\n            result.append(element)\n    return result\n"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum\n"}
{"task_id": "Mbpp/164", "solution": "def are_equivalent(a, b):\n    sum_a = sum([i for i in range(1, a+1) if a % i == 0])\n    sum_b = sum([i for i in range(1, b+1) if b % i == 0])\n    return sum_a == sum_b\n"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    count = 0\n    for i in range(len(s)):\n        if ord(s[i].lower()) - ord('a') == i:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    count = 0\n    for i in lst:\n        if i == num:\n            count += 1\n    return count\n\nassert frequency([1,2,3], 4) == 0\n"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(arr, start, end):\n    return sum(arr[start:end+1])\n\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return side_length * 5\n"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+3] =='std':\n            count += 1\n    return count\n\nassert count_occurance(\"letstdlenstdporstd\") == 3\n"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    \"\"\"\n    This function takes a tuple as an argument and returns True if all the elements in the tuple have the same data type,\n    otherwise it returns False.\n    \"\"\"\n    if len(tup) == 0:\n        return True\n    else:\n        first_type = type(tup[0])\n        for i in range(1, len(tup)):\n            if type(tup[i])!= first_type:\n                return False\n        return True\n"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, elem):\n    count = 0\n    for i in range(n):\n        if arr[i] == elem:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"}
{"task_id": "Mbpp/226", "solution": "defodd_values_string(string):\n    return ''.join([string[i] for i in range(len(string)) if i % 2 == 0])\n\nassertodd_values_string('abc') == 'ac'\n"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a,b,c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\nassert min_of_three(10,20,0)==0\n"}
{"task_id": "Mbpp/229", "solution": "def re_arrange_array(arr, n):\n    neg_arr = []\n    pos_arr = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n    return neg_arr + pos_arr\n"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, char):\n    return string.replace(\" \", char)\n\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n"}
{"task_id": "Mbpp/232", "solution": "deflarg_nnum(lst, n):\n    lst.sort(reverse=True)\n    return lst[:n]\n"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length**3\n\nassert volume_cube(3)==27\n"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    result = 0\n    for i in range(0, n.bit_length()):\n        if i % 2 == 0:\n            result |= 1 << i\n    return result\n\nassert even_bit_set_number(10) == 10\n"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(tuples):\n    occurences = {}\n    for tup in tuples:\n        if tup in occurences:\n            occurences[tup] += 1\n        else:\n            occurences[tup] = 1\n    return occurences\n"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 1\n    elif m < 2:\n        return 0\n    else:\n        return get_total_number_of_sequences(m-1, n-1) + get_total_number_of_sequences(m-2, n-1)\n"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    list1[-1] = list2\n    return list1\n"}
{"task_id": "Mbpp/242", "solution": "def count_charac(string):\n    return len(string)\n\nassert count_charac(\"python programming\")==18\n"}
{"task_id": "Mbpp/244", "solution": "def next_Perfect_Square(n):\n    i = n + 1\n    while True:\n        if i*i > n:\n            return i*i\n        i += 1\n"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    return max(dp[n-1], dp[n-2] + arr[n-1])\n"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    n = len(s)\n    dp = [[0]*n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    \n    return dp[0][n-1]\n"}
{"task_id": "Mbpp/249", "solution": "def intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, elem):\n    count = 0\n    for item in tup:\n        if item == elem:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(z):\n    r = abs(z)\n    theta = cmath.phase(z)\n    return (r, theta)\n\nassert convert(1) == (1.0, 0.0)\n"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, int):\n            count += 1\n    return count\n\nassert count_integer([1,2,'abc',1.2]) == 2\n"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(colors, n):\n    if n == 0:\n        return [()]\n    else:\n        result = []\n        for color in colors:\n            for combination in combinations_colors(colors, n-1):\n                result.append((color,) + combination)\n        return result\n"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a,b):\n    return (b,a)\n"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(t1, t2):\n    max_t1 = max(t1, key=lambda x: x[1])\n    max_t2 = max(t2, key=lambda x: x[1])\n    return (max_t1, max_t2)\n\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    \"\"\"\n    This function takes an integer n and returns the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    else:\n        p = 2\n        q = 3\n        r = 5\n        s = 7\n        t = 11\n        u = 13\n        v = 17\n        w = 19\n        x = 23\n        y = 29\n        z = 31\n        a = 2\n        b = 3\n        c = 5\n        d = 7\n        e = 11\n        f = 13\n        g = 17\n        h = 19\n        i = 23\n        j = 29\n        k = 31\n        l = 37\n        m = 41\n        n = 43\n        o = 47\n        p = 53\n        q = 59\n        r = 61\n        s = 67\n        t = 71\n        u = 73\n        v = 79\n        w = 83\n        x = 89\n        y = 97\n        z = 101\n        a = 2\n        b = 3\n        c = 5\n        d = 7\n        e = 11\n        f = 13\n        g = 17\n        h = 19\n        i = 23\n        j = 29\n        k = 31\n        l = 37\n        m = 41\n        n = 43\n        o = 47\n        p = 53\n        q = 59\n        r = 61\n        s = 67\n        t = 71\n        u = 73\n        v = 79\n        w = 83\n        x = 89\n        y = 97\n        z = 101\n        \n        for i in range(n):\n            p = (p**2 + q**2) % (2*z)\n            q = (p**2 - q**2) % (2*z)\n            p = (p**2 + q**2) % (2*z)\n            q = (p**2 - q**2) % (2*z)\n            p = (p**2 + q**2) % (2*z)\n            q = (p**2 - q**2) % (2*z)\n            p = ("}
{"task_id": "Mbpp/261", "solution": "def division_elements(tup1, tup2):\n    return tuple([x/y for x, y in zip(tup1, tup2)])\n\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return lst[:L], lst[L:]\n"}
{"task_id": "Mbpp/264", "solution": "def dog_age(age):\n    return age * 7\n\nassert dog_age(12) == 61\n"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side):\n    return 6 * side**2\n"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_star_num(n-1) + find_star_num(n-2)\n"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)\n\nassert ascii_value('A')==65\n"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    sum = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum\n\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum\n"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples):\n    return [t[-1] for t in tuples]\n"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        result.append(t1[i] - t2[i])\n    return tuple(result)\n"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum += binomial_coeff(n, i)\n    return sum\n"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height\n\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}\n\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            count += 1\n    return count\n\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    This function takes an integer n and returns the nth decagonal number.\n    \"\"\"\n    return n * (3 * n - 2)\n\nassert is_num_decagonal(3) == 27\n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)\n"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))\n\nassert all_unique([1,2,3]) == True\n"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] - list2[i])\n    return result\n\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    freq = {}\n    for digit in str(num):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit, count in freq.items():\n        if int(digit) > count:\n            return False\n    return True\n"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    for item in lst:\n        if item!= element:\n            return False\n    return True\n"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three(text):\n    if 'ab' in text:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    max_sum = 0\n    for i in range(n):\n        current_sum = 0\n        for j in range(k):\n            current_sum += arr[i + j]\n            max_sum = max(max_sum, current_sum)\n    return max_sum\n"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**2\n    return sum\n"}
{"task_id": "Mbpp/290", "solution": "def max_length(lists):\n    max_length = 0\n    max_list = []\n    for lst in lists:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_length, max_list\n"}
{"task_id": "Mbpp/292", "solution": "def find(a,b):\n    return a//b\n\nassert find(10,3) == 3\n"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a,b):\n    c = math.sqrt(a**2 + b**2)\n    return c\n\nassert otherside_rightangle(7,8) == 10.63014581273465\n"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_val = lst[0]\n    for item in lst:\n        if item > max_val:\n            max_val = item\n    return max_val\n\nassert max_val(['Python', 3, 2, 4, 5,'version'])==5\n"}
{"task_id": "Mbpp/295", "solution": "def sum_div(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\nassert sum_div(8) == 7\n"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    result = []\n    for item in nested_list:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(tuples):\n    max_aggregate = 0\n    max_name = ''\n    for name, score in tuples:\n        if score > max_aggregate:\n            max_aggregate = score\n            max_name = name\n    return max_name, max_aggregate\n\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n"}
{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2)\n"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    p_words = []\n    for word in words:\n        if word.startswith('p'):\n            p_words.append(word)\n    return p_words\n\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, k, i):\n    if k > i:\n        return 0\n    if i == 0:\n        return arr[0]\n    if arr[i] <= arr[i-1]:\n        return max_sum_increasing_subseq(arr, k, i-1)\n    return max(arr[i] + max_sum_increasing_subseq(arr, k, i-1), max_sum_increasing_subseq(arr, k, i-1))\n"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n    result = []\n    for i in range(n):\n        result.append(list1[i]*list2[i])\n    return result\n"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(string):\n    return tuple(string)\n\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the leftmost unset bit in a given number.\n    \"\"\"\n    return n | (n-1)\n\nassert set_left_most_unset_bit(10) == 14\n"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height\n\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)\n"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    return [format_str.format(i) for i in lst]\n"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(list1, list2, list3):\n    dictionary = {}\n    for i in range(len(list1)):\n        dictionary[list1[i]] = {list2[i]: list3[i]}\n    return dictionary\n"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(tup) == len(set(tup))\n\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in string:\n        if char_count[char] == 1:\n            return char\n    return None\n\nassert first_non_repeating_character(\"abcabc\") == None\n"}
{"task_id": "Mbpp/396", "solution": "def check_char(s):\n    if s[0] == s[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a,b,c):\n    nums = [a,b,c]\n    nums.sort()\n    if len(nums) % 2 == 0:\n        median = (nums[len(nums)//2] + nums[len(nums)//2 - 1])/2\n    else:\n        median = nums[len(nums)//2]\n    return median\n\nassert median_numbers(25,55,65)==55.0\n"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(nums):\n    sum = 0\n    for num in nums:\n        sum += sum(int(digit) for digit in str(num))\n    return sum\n\nassert sum_of_digits([10,2,56])==14\n"}
{"task_id": "Mbpp/400", "solution": "def extract_freq(lst):\n    freq = {}\n    for tup in lst:\n        if tup in freq:\n            freq[tup] += 1\n        else:\n            freq[tup] = 1\n    return len(freq)\n"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n\nassert minimum(1,2) == 1\n"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tup, elem):\n    for item in tup:\n        if item == elem:\n            return True\n    return False\n\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/407", "solution": "def rearrange_bigger(num):\n    num_list = list(str(num))\n    num_list.sort()\n    num_list.reverse()\n    return int(''.join(num_list))\n"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples):\n    min_product = float('inf')\n    for tup in tuples:\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n    return min_product\n"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    min_val = lst[0]\n    for item in lst:\n        if item < min_val:\n            min_val = item\n    return min_val\n\nassert min_val(['Python', 3, 2, 4, 5,'version']) == 2\n"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]\n\nassert remove_odd([1,2,3]) == [2]\n"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    return [x[0] for x in lst[:n]]\n"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    for i in seq1:\n        if i in seq2:\n            return True\n    return False\n"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    max_product = 0\n    max_pair = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair\n"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_len = 0\n    max_elem = []\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem\n"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    total = 0\n    for num in numbers:\n        total += round(num)\n    return total * len(numbers)\n\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n"}
{"task_id": "Mbpp/420", "solution": "defcube_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**3\n    return sum\n\nassertcube_Sum(2) == 72\n"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup):\n    return '-'.join(tup)\n\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n\nassert find_Average_Of_Cube(2) == 4.5\n"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    return [s[-1] for s in tup]\n"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 == 1]\n\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    date_list = date.split('-')\n    date_list[0], date_list[1], date_list[2] = date_list[2], date_list[1], date_list[0]\n    return '-'.join(date_list)\n"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(t1, t2):\n    return tuple(a & b for a, b in zip(t1, t2))\n\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a,b,c):\n    return -(b**2)/(4*a)\n\nassert parabola_directrix(5,3,2)==-198\n"}
{"task_id": "Mbpp/431", "solution": "def common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a,b,c):\n    \"\"\"\n    This function takes in the lengths of the four sides of a trapezium and returns the median length of the trapezium.\n    \"\"\"\n    return (a+b+c)/2\n\nassert median_trapezium(15,25,35)==20\n"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for i in arr:\n        if i <= num:\n            return False\n    return True\n"}
{"task_id": "Mbpp/435", "solution": "def last_Digit(num):\n    return num % 10\n"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(nums):\n    return [num for num in nums if num < 0]\n"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return ''.join([char for i, char in enumerate(s) if i % 2 == 0])\n\nassert remove_odd(\"python\")==(\"yhn\")\n"}
{"task_id": "Mbpp/438", "solution": "def count_bidirectional(tuples):\n    count = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if tuples[i][0] == tuples[j][1] and tuples[i][1] == tuples[j][0]:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(nums):\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n\nassert multiple_to_single([11, 33, 50]) == 113350\n"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    adverb_positions = []\n    adverb = ''\n    for i, word in enumerate(sentence.split()):\n        if word.endswith('ly'):\n            adverb = word\n            adverb_positions.append((i, i+len(word), adverb))\n    return adverb_positions\n\nassert find_adverb_position(\"clearly!! we can see the sky\")==[(0, 7, 'clearly')]\n"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    return 6 * size**2\n\nassert surfacearea_cube(5)==150\n"}
{"task_id": "Mbpp/442", "solution": "def positive_count(arr):\n    positive_count = 0\n    for num in arr:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(arr)\n\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54\n"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(t1, t2):\n    result = []\n    for i in range(len(t1)):\n        result.append((t1[i][0]*t2[i][0], t1[i][1]*t2[i][1]))\n    return result\n\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    count = 0\n    for elem in tup:\n        if elem in lst:\n            count += 1\n    return count\n\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    return [num**3 for num in nums]\n"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n"}
{"task_id": "Mbpp/450", "solution": "def extract_string(lst, size):\n    return [s[:size] for s in lst]\n"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    return string.replace(' ', '')\n\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n\nassert sumofFactors(18) == 26\n"}
{"task_id": "Mbpp/454", "solution": "def text_match_wordz(text):\n    return 'z' in text\n\nassert text_match_wordz(\"pythonz.\")==True\n"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(lst):\n    return [s[::-1] for s in lst]\n"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width\n\nassert rectangle_area(10,20)==200\n"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    result = ''\n    for char in s:\n        if char.islower():\n            result += char\n    return result\n\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst]\n"}
{"task_id": "Mbpp/461", "solution": "def upper_ctr(s):\n    count = 0\n    for c in s:\n        if c.isupper():\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    result = [[]]\n    for item in lst:\n        result += [x + [item] for x in result]\n    return result\n"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        temp = max_product\n        max_product = max(arr[i], max_product * arr[i], min_product * arr[i])\n        min_product = min(arr[i], temp * arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result\n"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}\n"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        product = arr[i]\n        for j in range(i+1, len(arr)):\n            product *= arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    return [tup[i] + tup[i+1] for i in range(len(tup)-1)]\n\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    lst.sort()\n    for i in range(len(lst)-1):\n        if lst[i+1] - lst[i]!= 1:\n            return False\n    return True\n"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    result = set()\n    for t1 in tuple_list1:\n        for t2 in tuple_list2:\n            if t1 == t2:\n                result.add(t1)\n    return result\n\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n"}
{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    return string.replace(old_char, new_char)\n\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1])\n\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    return max(arr) + min(arr)\n\nassert big_sum([1,2,3]) == 4\n"}
{"task_id": "Mbpp/477", "solution": "defis_lower(string):\n    return string.lower()\n\nassertis_lower(\"InValid\") == \"invalid\"\n"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char\n    return result\n\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n"}
{"task_id": "Mbpp/479", "solution": "def first_Digit(num):\n    return int(str(num)[0])\n\nassert first_Digit(123) == 1\n"}
{"task_id": "Mbpp/554", "solution": "defSplit(lst):\n    return [x for x in lst if x % 2!= 0]\n"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_cubes = 0\n    sum_n = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_n += i\n    return sum_cubes - sum_n\n"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, xor):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] ^ arr[j]) % 2 == 1:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.swapcase()\n\nassert toggle_string(\"Python\")==(\"pYTHON\")\n"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    sum = 0\n    for i in range(len(str(num1))):\n        sum += abs(int(str(num1)[i]) - int(str(num2)[i]))\n    return sum\n\nassert digit_distance_nums(1,2) == 1\n"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, k):\n    max_sum = 0\n    window_sum = 0\n    window_start = 0\n    for window_end in range(len(arr)):\n        window_sum += arr[window_end]\n        if window_sum > max_sum:\n            max_sum = window_sum\n        if window_end - window_start + 1 > k:\n            window_sum -= arr[window_start]\n            window_start += 1\n    return max_sum\n"}
{"task_id": "Mbpp/560", "solution": "def union_elements(t1, t2):\n    return sorted(list(set(t1 + t2)))\n\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length\n"}
{"task_id": "Mbpp/563", "solution": "def extract_values(string):\n    values = []\n    start = 0\n    while True:\n        start = string.find('\"', start)\n        if start == -1:\n            break\n        end = string.find('\"', start + 1)\n        values.append(string[start + 1:end])\n        start = end + 1\n    return values\n\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/565", "solution": "def split(string):\n    return list(string)\n\nassert split('python') == ['p','y','t','h','o','n']\n"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n"}
{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    return [{} for _ in range(n)]\n"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(lists):\n    result = []\n    for lst in lists:\n        result += list(set(lst))\n    return list(set(result))\n"}
{"task_id": "Mbpp/573", "solution": "def unique_product(nums):\n    unique_nums = set(nums)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000\n"}
{"task_id": "Mbpp/574", "solution": "def surfacearea_cylinder(radius, height):\n    \"\"\"\n    This function calculates the surface area of a cylinder\n    \"\"\"\n    return 2*3.14*radius*(radius+height)\n\nassert surfacearea_cylinder(10,5)==942.45\n"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(arr1, arr2):\n    if len(arr2) > len(arr1):\n        return False\n    for i in range(len(arr1) - len(arr2) + 1):\n        if arr1[i:i+len(arr2)] == arr2:\n            return True\n    return False\n"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return (n % 10) * last_Digit_Factorial(n-1)\n"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(t1, t2):\n    return tuple(set(t1) ^ set(t2))\n\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n"}
{"task_id": "Mbpp/580", "solution": "def extract_even(tup):\n    result = []\n    for item in tup:\n        if isinstance(item, tuple):\n            result.append(extract_even(item))\n        elif isinstance(item, int):\n            if item % 2 == 0:\n                result.append(item)\n    return tuple(result)\n"}
{"task_id": "Mbpp/581", "solution": "def surface_Area(base_edge, height):\n    base_area = base_edge**2\n    side_area = base_edge * height\n    lateral_area = base_edge * 4\n    return base_area + side_area + lateral_area\n\nassert surface_Area(3,4) == 33\n"}
{"task_id": "Mbpp/582", "solution": "defmy_dict(d):\n    return len(d) == 0\n\nassertmy_dict({10}) == False\n"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n == 0:\n        return 1\n    else:\n        return (4*n-2)*catalan_number(n-1)/(n+1)\n\nassert catalan_number(10)==16796\n"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(data, n):\n    sorted_data = sorted(data, key=lambda x: x['price'], reverse=True)\n    return sorted_data[:n]\n"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]\n\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)\n\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    return max(lst) - min(lst)\n\nassert big_diff([1,2,3,4]) == 3\n"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    squares = []\n    for i in range(start, end+1):\n        if i**2 <= end:\n            squares.append(i**2)\n    return squares\n\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n"}
{"task_id": "Mbpp/590", "solution": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)\n\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n"}
{"task_id": "Mbpp/592", "solution": "def sum_Of_product(n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1):\n            sum += binomial_coefficient(i, j)\n    return sum\n\ndef binomial_coefficient(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k)\n"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    ip_list = ip.split('.')\n    for i in range(len(ip_list)):\n        if ip_list[i] == '0':\n            ip_list[i] = '0'\n    return '.'.join(ip_list)\n\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    even = None\n    odd = None\n    for num in lst:\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n    return even - odd\n\nassert diff_even_odd([1,3,5,7,4,1,6,8]) == 3\n"}
{"task_id": "Mbpp/595", "solution": "def min_Swaps(str1, str2):\n    n = len(str1)\n    str1 = list(str1)\n    str2 = list(str2)\n    str1_dict = {str1[i]: i for i in range(n)}\n    str2_dict = {str2[i]: i for i in range(n)}\n    \n    swaps = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            swaps += 1\n            str1[i], str1[str1_dict[str2[i]]] = str1[str1_dict[str2[i]]], str1[i]\n            str2[i], str2[str2_dict[str1[i]]] = str2[str2_dict[str1[i]]], str2[i]\n    return swaps\n"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(tup):\n    return sys.getsizeof(tup)\n\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            k -= 1\n            j += 1\n    return arr1[i] if k == 0 else arr2[j-1]\n"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if n == sum:\n        return True\n    else:\n        return False\n\nassert armstrong_number(153)==True\n"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum, sum/n\n\nassert sum_average(10)==(55, 5.5)\n"}
{"task_id": "Mbpp/600", "solution": "def is_Even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    seen = set()\n    for char in string:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n\nassert first_repeated_char(\"abcabc\") == \"a\"\n"}
{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if is_ludic(i):\n            ludic_numbers.append(i)\n    return ludic_numbers\n\ndef is_ludic(n):\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    words = string.split()\n    words.reverse()\n    return \" \".join(words)\n\nassert reverse_words(\"python program\")==(\"program python\")\n"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nassert prime_num(13)==True\n"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees):\n    return degrees * math.pi / 180\n\nassert radian_degree(90) == 1.5707963267948966\n"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(string, pattern):\n    match = re.search(pattern, string)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None\n\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    for i in range(1, n + 1):\n        bell[i] = 0\n        for j in range(i):\n            bell[i] += bell[j] * bell[i - j - 1]\n    return bell[n]\n\nassert bell_Number(2) == 2\n"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]\n"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    max_val = float('-inf')\n    for row in matrix:\n        max_val = max(max_val, row[n])\n    return max_val\n"}
{"task_id": "Mbpp/612", "solution": "def merge(lists):\n    result = [[], []]\n    for lst in lists:\n        result[0].append(lst[0])\n        result[1].append(lst[1])\n    return result\n"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tup_list):\n    cumulative_sum = 0\n    for tup in tup_list:\n        cumulative_sum += sum(tup)\n    return cumulative_sum\n\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(t):\n    return [sum(x)/len(x) for x in t]\n\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    return tuple([x % y for x, y in zip(t1, t2)])\n\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i]/list2[i])\n    return result\n\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n"}
{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    nums = []\n    non_nums = []\n    for char in s:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            non_nums.append(char)\n    return ''.join(non_nums + nums)\n"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    nums.sort()\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2):\n    n = len(list1)\n    m = len(list2)\n    if n == m:\n        return (list1[n//2] + list2[n//2])/2\n    elif n > m:\n        return get_median(list1[:n//2], list2)\n    else:\n        return get_median(list1, list2[:m//2])\n"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    return [num**n for num in nums]\n"}
{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()\n\nassert is_upper(\"person\") == \"PERSON\"\n"}
{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        return (math.pi * radius**2) / 2\n"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(\" \", \"%20\")\n\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n"}
{"task_id": "Mbpp/629", "solution": "defSplit(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n\nassertSplit([1,2,3,4,5]) == [2,4]\n"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    return [[x-1, y], [x, y-1], [x, y+1], [x+1, y], [x-1, y+1], [x+1, y-1], [x-1, y-1], [x+1, y+1]]\n"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(s):\n    return s.translate(str.maketrans(' \\t\\n\\r\\f\\v','_ _ _ _ _'))\n"}
{"task_id": "Mbpp/632", "solution": "def move_zero(arr):\n    zero_count = arr.count(0)\n    for i in range(zero_count):\n        arr.remove(0)\n    arr.extend([0]*zero_count)\n    return arr\n"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, xor_sum):\n    result = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            result += nums[i] ^ nums[j]\n    return result\n\nassert pair_xor_Sum([5,9,7,6],4) == 47\n"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr\n\ndef heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n    if largest!= i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(n,m):\n    if n>m:\n        return False\n    elif n==m:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(velocity, temperature):\n    wind_chill_index = 13.12 + 0.6215*temperature - 11.37*(velocity**0.16) + 0.3965*temperature*(velocity**0.16)\n    return round(wind_chill_index)\n"}
{"task_id": "Mbpp/639", "solution": "defsample_nam(names):\n    total_length = 0\n    for name in names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n\nassertsample_nam(['sally', 'Dylan','rebecca', 'Diana', 'Joanne', 'keith']) == 16\n"}
{"task_id": "Mbpp/640", "solution": "def remove_parenthesis(string):\n    result = \"\"\n    for char in string:\n        if char!= \"(\" and char!= \")\":\n            result += char\n    return result\n"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    return n == (3 * n**2 - 2 * n) // 2\n\ndef nth_nonagonal(n):\n    return (3 * n**2 - 2 * n) // 2\n\nassert is_nonagonal(10) == 325\nassert nth_nonagonal(10) == 325\n"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    if text[0] == 'z' and text[-1] == 'z':\n        return False\n    if 'z' in text[1:-1]:\n        return False\n    return True\n"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    arr[:k] = arr[:k][::-1]\n    return arr\n"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dict):\n    return tup + (dict,)\n\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is\n    defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell.\n    We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    # Initialize the result\n    result = 0\n    \n    # Iterate over the matrix\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            # Initialize the total cost and the number of cells visited\n            total_cost = 0\n            num_cells = 0\n            \n            # Initialize the current cell\n            current_cell = (i, j)\n            \n            # Initialize the maximum average\n            max_avg = 0\n            \n            # Iterate over the matrix\n            while current_cell[0] < len(matrix) and current_cell[1] < len(matrix[0]):\n                # Add the cost of the current cell to the total cost\n                total_cost += matrix[current_cell[0]][current_cell[1]]\n                \n                # Increment the number of cells visited\n                num_cells += 1\n                \n                # Update the maximum average\n                max_avg = max(max_avg, total_cost / num_cells)\n                \n                # Move to the next cell\n                if current_cell[0] < len(matrix) - 1:\n                    current_cell = (current_cell[0] + 1, current_cell[1])\n                else:\n                    current_cell = (current_cell[0], current_cell[1] + 1)\n    \n    # Return the maximum average\n    return max_avg\n"}
{"task_id": "Mbpp/722", "solution": "def filter_data(data, min_height, min_weight):\n    filtered_data = {}\n    for student, (height, weight) in data.items():\n        if height > min_height and weight > min_weight:\n            filtered_data[student] = (height, weight)\n    return filtered_data\n"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count\n\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]) == 3\n"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    sum = 0\n    for i in range(power):\n        sum += int(str(base**i))\n    return sum\n"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation(string):\n    result = []\n    start = 0\n    while True:\n        start = string.find('\"', start)\n        if start == -1:\n            break\n        end = string.find('\"', start + 1)\n        result.append(string[start + 1:end])\n        start = end + 1\n    return result\n\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53','multi', 'Processor']\n"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    result = []\n    for i in range(len(t) - 1):\n        result.append(t[i] * t[i+1])\n    return tuple(result)\n\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    return [x+y for x,y in zip(list1, list2)]\n"}
{"task_id": "Mbpp/730", "solution": "def remove_consecutive_duplicates(lst):\n    result = []\n    for i in lst:\n        if not result or i!= result[-1]:\n            result.append(i)\n    return result\n"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndeflateralsurface_cone(r, h):\n    return math.pi * r * math.sqrt(r**2 + h**2)\n\nassertlateralsurface_cone(5,12) == 204.20352288132054\n"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')\n\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, num):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == num:\n            while mid > 0 and arr[mid - 1] == num:\n                mid -= 1\n            return mid\n        elif arr[mid] < num:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            sum += arr[i] * arr[j]\n    return sum\n"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Convert the number to binary\n    binary_n = bin(n)[2:]\n    \n    # If the number of bits is odd, then add a 0 at the end\n    if len(binary_n) % 2 == 1:\n        binary_n += '0'\n    \n    # Iterate over the bits and toggle them\n    for i in range(1, len(binary_n) - 1):\n        if binary_n[i] == '0':\n            binary_n = binary_n[:i] + '1' + binary_n[i+1:]\n        else:\n            binary_n = binary_n[:i] + '0' + binary_n[i+1:]\n    \n    # Convert the binary number back to an integer\n    return int(binary_n, 2)\n"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, val):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] < val:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(s):\n    pattern = r'^[aeiouAEIOU]'\n    match = re.match(pattern, s)\n    if match:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    i = 1\n    while True:\n        triangular_num = i * (i + 1) // 2\n        if len(str(triangular_num)) == n:\n            return i\n        i += 1\n"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(t):\n    d = {}\n    for i in range(len(t)-1):\n        d[t[i]] = t[i+1]\n    return d\n\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    if len(set(string)) == 1:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(a):\n    return (math.sqrt(3)/4)*a**2\n\nassert area_tetrahedron(3)==15.588457268119894\n"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(arr, n):\n    n = n % len(arr)\n    return arr[-n:] + arr[:-n]\n"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    for item in tup:\n        if item is None:\n            return True\n    return False\n\nassert check_none((10, 4, 5, 6, None)) == True\n"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        if all(num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result\n"}
{"task_id": "Mbpp/746", "solution": "import math\n\ndef sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        return (angle/360)*math.pi*radius**2\n"}
{"task_id": "Mbpp/748", "solution": "defcapital_words_spaces(s):\n    words = s.split()\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n    return ''.join(words)\n\nassertcapital_words_spaces(\"Python\") == 'Python'\n"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(strings):\n    return sorted(strings, key=lambda x: int(x))\n"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    lst.extend(tup)\n    return lst\n\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n):\n        if 2*i+1 < n and arr[2*i+1] < arr[i]:\n            return False\n        if 2*i+2 < n and arr[2*i+2] < arr[i]:\n            return False\n    return True\n"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n"}
{"task_id": "Mbpp/753", "solution": "def min_k(tuples, k):\n    sorted_tuples = sorted(tuples, key=lambda x: x[1])\n    return sorted_tuples[:k]\n"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(lst):\n    smallest = min(lst)\n    lst.remove(smallest)\n    second_smallest = min(lst)\n    return second_smallest\n\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j][::-1]:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/758", "solution": "defunique_sublists(lst):\n    sublists = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublists:\n            sublists[sublist_tuple] += 1\n        else:\n            sublists[sublist_tuple] = 1\n    return sublists\n"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(nums):\n    if len(set(nums)) == 1:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    if month == 2:\n        return False\n    elif month in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    ctr = 0\n    for char in string:\n        if char.isdigit():\n            ctr += 1\n    return ctr\n"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    \"\"\"\n    This function returns the nth polite number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return is_polite(n-1) + is_polite(n-2)\n"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, sum):\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == sum:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return [x for x in list1 if x not in list2]\n"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum\n\nassert odd_num_sum(2) == 82\n"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    for char in expression:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        elif char in [\")\", \"}\", \"]\"]:\n            if not stack:\n                return False\n            if char == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif char == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif char == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    return not stack\n"}
{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    words = s.split()\n    new_words = []\n    for word in words:\n        if len(word)!= k:\n            new_words.append(word)\n    return''.join(new_words)\n"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(string, sub):\n    start = 0\n    while True:\n        start = string.find(sub, start)\n        if start == -1:\n            return None\n        yield sub, start, start + len(sub)\n        start += 1\n"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True\n"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    sum = 0\n    for i in lst:\n        if lst.count(i) == 1:\n            sum += i\n    return sum\n"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    result = []\n    current_sublist = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i]!= lst[i-1]:\n            if current_sublist:\n                result.append(current_sublist)\n            current_sublist = [lst[i]]\n        else:\n            current_sublist.append(lst[i])\n    if current_sublist:\n        result.append(current_sublist)\n    return result\n"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuples):\n    result = []\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            result.append((tuples[i][0]+tuples[j][0], tuples[i][1]+tuples[j][1]))\n    return result\n"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nassert count_divisors(10) == 4\n"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if (j-i+1) % 2!= 0:\n                sum += sum(arr[i:j+1])\n    return sum\n"}
{"task_id": "Mbpp/783", "solution": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    h = round(h * 60)\n    if h < 0:\n        h += 360\n    s = 0 if cmax == 0 else delta / cmax\n    v = cmax\n    return h, s, v\n"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even_product = 1\n    odd_product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return even_product * odd_product\n\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tup_str):\n    return tuple(map(int, tup_str.replace(\"(\", \"\").replace(\")\", \"\").split(\",\")))\n\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, val):\n    \"\"\"\n    This function takes a sorted array and a value and returns the index at which the value should be inserted to maintain the sorted order.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] >= val:\n            return i\n    return len(arr)\n\nassert right_insertion([1,2,4,5],6)==4\n"}
{"task_id": "Mbpp/787", "solution": "def text_match_three(text):\n    if len(text) < 4:\n        return False\n    if text[0] == 'a' and text[1:4] == 'bbb':\n        return True\n    return False\n"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(string, list):\n    return tuple(string + list)\n\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2!= 0:\n            return False\n    return True\n"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    new_tup = []\n    for item in tup:\n        if isinstance(item, tuple):\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return tuple(new_tup)\n\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    count = 0\n    for lst in lists:\n        count += 1\n    return count\n"}
{"task_id": "Mbpp/793", "solution": "def last(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"}
{"task_id": "Mbpp/794", "solution": "def text_starta_endb(text):\n    return re.search(r'a.*b$', text)\n"}
{"task_id": "Mbpp/796", "solution": "def return_sum(d):\n    sum = 0\n    for key in d:\n        sum += d[key]\n    return sum\n\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum\n\nassert sum_in_range(2,5) == 8\n"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n\nassert _sum([1, 2, 3]) == 6\n"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    return ((num << d) | (num >> (32 - d))) & 0xFFFFFFFF\n\nassert left_rotate(16,2) == 64\n"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(string):\n    return string.replace(\" \", \"\")\n\nassert remove_all_spaces('python  program')==('pythonprogram')\n"}
{"task_id": "Mbpp/801", "solution": "deftest_three_equal(a, b, c):\n    count = 0\n    if a == b:\n        count += 1\n    if b == c:\n        count += 1\n    if a == c:\n        count += 1\n    return count\n\nasserttest_three_equal(1,1,1) == 3\n"}
{"task_id": "Mbpp/803", "solution": "#include <iostream>\n#include <math.h>\n\nbool is_perfect_square(int n) {\n    int root = sqrt(n);\n    if (root * root == n) {\n        return true;\n    }\n    return false;\n}\n\nint main() {\n    assert not is_perfect_square(10);\n    return 0;\n}\n"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(nums):\n    product = 1\n    for num in nums:\n        product *= num\n    return product % 2 == 0\n\nassert is_product_even([1,2,3]) == False\n"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        curr_sum = sum(lst)\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_list = lst\n    return max_list\n"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for c in s:\n        if c.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2!= 0:\n            return num\n    return None\n"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    for i in tup:\n        if i == k:\n            return True\n    return False\n"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tup1, tup2):\n    for i in range(len(tup1)):\n        if tup1[i] >= tup2[i]:\n            return False\n    return True\n"}
